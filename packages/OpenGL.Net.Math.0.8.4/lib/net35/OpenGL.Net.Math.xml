<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenGL.Net.Math</name>
    </assembly>
    <members>
        <member name="T:OpenGL.Angle">
            <summary>
            Frequently used operations and definitions on angles.
            </summary>
        </member>
        <member name="M:OpenGL.Angle.Normalize360(System.Double)">
            <summary>
            Normalize an angle in the range [0,360).
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that is the angle to be normalized, in degrees.
            </param>
            <returns>
            It returns the normalized value of <paramref name="angle"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Angle.Normalize360(System.Single)">
            <summary>
            Normalize an angle in the range [0,360).
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that is the angle to be normalized, in degrees.
            </param>
            <returns>
            It returns the normalized value of <paramref name="angle"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Angle.ToDegrees(System.Double)">
            <summary>
            Convert angle from radian units to degree units.
            </summary>
            <param name="radians">
            A <see cref="T:System.Double"/> that specifies the angle to convert, in radians.
            </param>
            <returns>
            It returns a <see cref="T:System.Double"/> that is <paramref name="radians"/>, but expressed in degress.
            </returns>
        </member>
        <member name="M:OpenGL.Angle.ToDegrees(System.Single)">
            <summary>
            Convert angle from radian units to degree units.
            </summary>
            <param name="radians">
            A <see cref="T:System.Single"/> that specifies the angle to convert, in radians.
            </param>
            <returns>
            It returns a <see cref="T:System.Single"/> that is <paramref name="radians"/>, but expressed in degress.
            </returns>
        </member>
        <member name="M:OpenGL.Angle.ToRadians(System.Double)">
            <summary>
            Convert angle from degree units to radian units.
            </summary>
            <param name="degrees">
            A <see cref="T:System.Double"/> that specifies the angle to convert, in degress.
            </param>
            <returns>
            It returns a <see cref="T:System.Double"/> that is <paramref name="degrees"/>, but expressed in radians.
            </returns>
        </member>
        <member name="M:OpenGL.Angle.ToRadians(System.Single)">
            <summary>
            Convert angle from degree units to radian units.
            </summary>
            <param name="degrees">
            A <see cref="T:System.Single"/> that specifies the angle to convert, in degress.
            </param>
            <returns>
            It returns a <see cref="T:System.Single"/> that is <paramref name="degrees"/>, but expressed in radians.
            </returns>
        </member>
        <member name="T:OpenGL.ColorR8">
            <summary>
            R color (single component).
            </summary>
        </member>
        <member name="M:OpenGL.ColorR8.#ctor(System.Byte)">
            <summary>
            Construct a ColorR8 specifying R component.
            </summary>
            <param name="r">
            A <see cref="T:System.Byte"/> that specify the red component.
            </param>
        </member>
        <member name="F:OpenGL.ColorR8.r">
            <summary>
            Red color component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorR8.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorR8.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorR16">
            <summary>
            R color (single component).
            </summary>
        </member>
        <member name="M:OpenGL.ColorR16.#ctor(System.Byte)">
            <summary>
            Construct a ColorR16 specifying R component.
            </summary>
            <param name="r">
            A <see cref="T:System.Byte"/> that specify the red component.
            </param>
        </member>
        <member name="F:OpenGL.ColorR16.r">
            <summary>
            Red color component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorR16.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorR16.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorR32">
            <summary>
            R color (single component).
            </summary>
        </member>
        <member name="M:OpenGL.ColorR32.#ctor(System.Byte)">
            <summary>
            Construct a ColorR32 specifying R component.
            </summary>
            <param name="r">
            A <see cref="T:System.Byte"/> that specify the red component.
            </param>
        </member>
        <member name="F:OpenGL.ColorR32.r">
            <summary>
            Red color component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorR32.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorR32.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRF">
            <summary>
            R color (single component).
            </summary>
        </member>
        <member name="M:OpenGL.ColorRF.#ctor(System.Single)">
            <summary>
            Construct a ColorRF specifying R component.
            </summary>
            <param name="r">
            A <see cref="T:System.Single"/> that specify the red component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRF.r">
            <summary>
            Red color component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRF.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRF.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRD">
            <summary>
            R color (single component).
            </summary>
        </member>
        <member name="M:OpenGL.ColorRD.#ctor(System.Double)">
            <summary>
            Construct a ColorRD specifying R component.
            </summary>
            <param name="r">
            A <see cref="T:System.Double"/> that specify the red component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRD.r">
            <summary>
            Red color component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRD.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRD.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRHF">
            <summary>
            R color (single component).
            </summary>
        </member>
        <member name="M:OpenGL.ColorRHF.#ctor(OpenGL.HalfFloat)">
            <summary>
            Construct a ColorRHF specifying R component.
            </summary>
            <param name="r">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the red component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRHF.r">
            <summary>
            Red color component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRHF.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRHF.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRGB8">
            <summary>
            RGB color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB8.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct a ColorRGB8 specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:System.Byte"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.Byte"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.Byte"/> that specify the blue component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGB8.rgb">
            <summary>
            RGB color components (packed).
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB8.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGB8">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGB8"/> initialized with the color components.
            </returns>
        </member>
        <member name="F:OpenGL.ColorRGB8.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB8.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB8.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB8.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB8.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB8.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB8.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB8.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB8.Red">
            <summary>
            Get or set the red component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB8.Green">
            <summary>
            Get or set the green component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB8.Blue">
            <summary>
            Get or set the blue component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB8.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB8.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRGB15">
            <summary>
            RGB color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB15.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct a ColorRGB15 specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:System.Byte"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.Byte"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.Byte"/> that specify the blue component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGB15.rgb">
            <summary>
            RGB color components (packed).
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB15.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGB15">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGB15"/> initialized with the color components.
            </returns>
        </member>
        <member name="F:OpenGL.ColorRGB15.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB15.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB15.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB15.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB15.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB15.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB15.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB15.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB15.Red">
            <summary>
            Get or set the red component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB15.Green">
            <summary>
            Get or set the green component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB15.Blue">
            <summary>
            Get or set the blue component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB15.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB15.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRGB16">
            <summary>
            RGB color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB16.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct a ColorRGB16 specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:System.Byte"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.Byte"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.Byte"/> that specify the blue component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGB16.rgb">
            <summary>
            RGB color components (packed).
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB16.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGB16">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGB16"/> initialized with the color components.
            </returns>
        </member>
        <member name="F:OpenGL.ColorRGB16.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB16.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB16.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB16.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB16.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB16.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB16.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB16.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB16.Red">
            <summary>
            Get or set the red component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB16.Green">
            <summary>
            Get or set the green component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB16.Blue">
            <summary>
            Get or set the blue component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB16.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB16.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRGB24">
            <summary>
            RGB color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct a ColorRGB24 specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:System.Byte"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.Byte"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.Byte"/> that specify the blue component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGB24.r">
            <summary>
            Red color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB24.g">
            <summary>
            Green color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB24.b">
            <summary>
            Blue color components.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB24.op_Implicit(OpenGL.ColorRGB24)~OpenGL.ColorRGBA32">
            <summary>
            Cast to ColorRGBA32 operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGB24"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.ColorRGBA32"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGB24.op_Implicit(OpenGL.ColorRGB24)~System.Byte[]">
            <summary>
            Cast to byte[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGB24"/> to be casted.
            </param>
            <returns>
            A <see cref="T:byte[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGB24.op_Implicit(OpenGL.ColorRGB24)~OpenGL.Vertex3ub">
            <summary>
            Cast to Vertex3ub operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGB24"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ub"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGB24.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGB24">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGB24"/> initialized with the color components.
            </returns>
        </member>
        <member name="F:OpenGL.ColorRGB24.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB24.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB24.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB24.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB24.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB24.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB24.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB24.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB24.Red">
            <summary>
            Get or set the red component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB24.Green">
            <summary>
            Get or set the green component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB24.Blue">
            <summary>
            Get or set the blue component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB24.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB24.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRGB48">
            <summary>
            RGB color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB48.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Construct a ColorRGB48 specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:System.UInt16"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.UInt16"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.UInt16"/> that specify the blue component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGB48.r">
            <summary>
            Red color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB48.g">
            <summary>
            Green color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB48.b">
            <summary>
            Blue color components.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB48.op_Implicit(OpenGL.ColorRGB48)~OpenGL.ColorRGBA64">
            <summary>
            Cast to ColorRGBA64 operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGB48"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.ColorRGBA64"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGB48.op_Implicit(OpenGL.ColorRGB48)~System.UInt16[]">
            <summary>
            Cast to ushort[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGB48"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ushort[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGB48.op_Implicit(OpenGL.ColorRGB48)~OpenGL.Vertex3us">
            <summary>
            Cast to Vertex3us operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGB48"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4us"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGB48.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGB48">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGB48"/> initialized with the color components.
            </returns>
        </member>
        <member name="F:OpenGL.ColorRGB48.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB48.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB48.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB48.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB48.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB48.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB48.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB48.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB48.Red">
            <summary>
            Get or set the red component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB48.Green">
            <summary>
            Get or set the green component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB48.Blue">
            <summary>
            Get or set the blue component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB48.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB48.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRGB96">
            <summary>
            RGB color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB96.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Construct a ColorRGB96 specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:System.UInt32"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.UInt32"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.UInt32"/> that specify the blue component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGB96.r">
            <summary>
            Red color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB96.g">
            <summary>
            Green color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB96.b">
            <summary>
            Blue color components.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGB96.op_Implicit(OpenGL.ColorRGB96)~System.UInt32[]">
            <summary>
            Cast to uint[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGB96"/> to be casted.
            </param>
            <returns>
            A <see cref="T:uint[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGB96.op_Implicit(OpenGL.ColorRGB96)~OpenGL.Vertex3ui">
            <summary>
            Cast to Vertex3ui operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGB96"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ui"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGB96.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGB96">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGB96"/> initialized with the color components.
            </returns>
        </member>
        <member name="F:OpenGL.ColorRGB96.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB96.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB96.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB96.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB96.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB96.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB96.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGB96.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB96.Red">
            <summary>
            Get or set the red component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB96.Green">
            <summary>
            Get or set the green component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB96.Blue">
            <summary>
            Get or set the blue component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB96.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGB96.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRGBF">
            <summary>
            RGB color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBF.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a ColorRGBF specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:System.Single"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> that specify the blue component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGBF.r">
            <summary>
            Red color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBF.g">
            <summary>
            Green color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBF.b">
            <summary>
            Blue color components.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBF.op_Implicit(OpenGL.ColorRGBF)~OpenGL.ColorRGBAF">
            <summary>
            Cast to ColorRGBAF operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBF"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.ColorRGBAF"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBF.op_Implicit(OpenGL.ColorRGBF)~System.Single[]">
            <summary>
            Cast to float[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBF"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBF.op_Implicit(OpenGL.ColorRGBF)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBF"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBF.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGBF">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGBF"/> initialized with the color components.
            </returns>
        </member>
        <member name="F:OpenGL.ColorRGBF.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBF.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBF.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBF.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBF.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBF.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBF.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBF.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBF.Red">
            <summary>
            Get or set the red component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBF.Green">
            <summary>
            Get or set the green component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBF.Blue">
            <summary>
            Get or set the blue component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBF.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBF.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRGBD">
            <summary>
            RGB color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBD.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a ColorRGBD specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:System.Double"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.Double"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.Double"/> that specify the blue component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGBD.r">
            <summary>
            Red color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBD.g">
            <summary>
            Green color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBD.b">
            <summary>
            Blue color components.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBD.op_Implicit(OpenGL.ColorRGBD)~System.Double[]">
            <summary>
            Cast to double[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBD"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBD.op_Implicit(OpenGL.ColorRGBD)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBD"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBD.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGBD">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGBD"/> initialized with the color components.
            </returns>
        </member>
        <member name="F:OpenGL.ColorRGBD.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBD.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBD.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBD.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBD.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBD.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBD.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBD.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBD.Red">
            <summary>
            Get or set the red component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBD.Green">
            <summary>
            Get or set the green component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBD.Blue">
            <summary>
            Get or set the blue component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBD.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBD.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRGBHF">
            <summary>
            RGB color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBHF.#ctor(OpenGL.HalfFloat,OpenGL.HalfFloat,OpenGL.HalfFloat)">
            <summary>
            Construct a ColorRGBHF specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the blue component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGBHF.r">
            <summary>
            Red color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBHF.g">
            <summary>
            Green color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBHF.b">
            <summary>
            Blue color components.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBHF.op_Implicit(OpenGL.ColorRGBHF)~OpenGL.ColorRGBAHF">
            <summary>
            Cast to ColorRGBAHF operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBHF"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.ColorRGBAHF"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBHF.op_Implicit(OpenGL.ColorRGBHF)~OpenGL.HalfFloat[]">
            <summary>
            Cast to HalfFloat[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBHF"/> to be casted.
            </param>
            <returns>
            A <see cref="T:HalfFloat[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBHF.op_Implicit(OpenGL.ColorRGBHF)~OpenGL.Vertex3hf">
            <summary>
            Cast to Vertex3hf operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBHF"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4hf"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBHF.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGBHF">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGBHF"/> initialized with the color components.
            </returns>
        </member>
        <member name="P:OpenGL.ColorRGBHF.Red">
            <summary>
            Get or set the red component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBHF.Green">
            <summary>
            Get or set the green component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBHF.Blue">
            <summary>
            Get or set the blue component.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBHF.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBHF.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="T:OpenGL.ColorRGBA32">
            <summary>
            RGBA color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBA32.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct a ColorRGBA32 specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:System.Byte"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.Byte"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.Byte"/> that specify the blue component.
            </param>
        </member>
        <member name="M:OpenGL.ColorRGBA32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct a ColorRGBA32 specifying RGBA components.
            </summary>
            <param name="r">
            A <see cref="T:System.Byte"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.Byte"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.Byte"/> that specify the blue component.
            </param>
            <param name="a">
            A <see cref="T:System.Byte"/> that specify the alpha component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGBA32.r">
            <summary>
            Red color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA32.g">
            <summary>
            Green color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA32.b">
            <summary>
            Blue color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA32.a">
            <summary>
            Alpha color components.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBA32.op_Multiply(OpenGL.ColorRGBA32,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBA32"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.ColorRGBA32"/> that equals to the multiplication of <paramref name="a"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA32.op_Implicit(OpenGL.ColorRGBA32)~System.Byte[]">
            <summary>
            Cast to byte[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBA32"/> to be casted.
            </param>
            <returns>
            A <see cref="T:byte[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA32.op_Implicit(OpenGL.ColorRGBA32)~OpenGL.Vertex4ub">
            <summary>
            Cast to Vertex4ub operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBA32"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ub"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA32.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGBA32">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGBA32"/> initialized with the color components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA32.op_Equality(OpenGL.ColorRGBA32,OpenGL.ColorRGBA32)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.ColorRGBA32.op_Inequality(OpenGL.ColorRGBA32,OpenGL.ColorRGBA32)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.ColorRGBA32.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA32.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA32.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA32.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA32.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA32.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA32.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA32.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBA32.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBA32.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="M:OpenGL.ColorRGBA32.Equals(OpenGL.ColorRGBA32,System.Byte)">
            <summary>
            Indicates whether the this ColorRGBA32 is equal to another ColorRGBA32, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.ColorRGBA32"/> to compare with this ColorRGBA32.
            </param>
            <param name="precision">
            The <see cref="T:System.Byte"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this ColorRGBA32 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA32.Equals(OpenGL.ColorRGBA32)">
            <summary>
            Indicates whether the this ColorRGBA32 is equal to another ColorRGBA32.
            </summary>
            <param name="other">
            An IVertex3 to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA32.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA32.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:OpenGL.ColorRGBA64">
            <summary>
            RGBA color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBA64.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Construct a ColorRGBA64 specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:System.UInt16"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.UInt16"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.UInt16"/> that specify the blue component.
            </param>
        </member>
        <member name="M:OpenGL.ColorRGBA64.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Construct a ColorRGBA64 specifying RGBA components.
            </summary>
            <param name="r">
            A <see cref="T:System.UInt16"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.UInt16"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.UInt16"/> that specify the blue component.
            </param>
            <param name="a">
            A <see cref="T:System.UInt16"/> that specify the alpha component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGBA64.r">
            <summary>
            Red color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA64.g">
            <summary>
            Green color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA64.b">
            <summary>
            Blue color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA64.a">
            <summary>
            Alpha color components.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBA64.op_Multiply(OpenGL.ColorRGBA64,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBA64"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.ColorRGBA64"/> that equals to the multiplication of <paramref name="a"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA64.op_Implicit(OpenGL.ColorRGBA64)~System.UInt16[]">
            <summary>
            Cast to ushort[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBA64"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ushort[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA64.op_Implicit(OpenGL.ColorRGBA64)~OpenGL.Vertex4us">
            <summary>
            Cast to Vertex4us operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBA64"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4us"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA64.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGBA64">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGBA64"/> initialized with the color components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA64.op_Equality(OpenGL.ColorRGBA64,OpenGL.ColorRGBA64)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.ColorRGBA64.op_Inequality(OpenGL.ColorRGBA64,OpenGL.ColorRGBA64)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.ColorRGBA64.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA64.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA64.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA64.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA64.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA64.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA64.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBA64.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBA64.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBA64.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="M:OpenGL.ColorRGBA64.Equals(OpenGL.ColorRGBA64,System.UInt16)">
            <summary>
            Indicates whether the this ColorRGBA64 is equal to another ColorRGBA64, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.ColorRGBA64"/> to compare with this ColorRGBA64.
            </param>
            <param name="precision">
            The <see cref="T:System.UInt16"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this ColorRGBA64 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA64.Equals(OpenGL.ColorRGBA64)">
            <summary>
            Indicates whether the this ColorRGBA64 is equal to another ColorRGBA64.
            </summary>
            <param name="other">
            An IVertex3 to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA64.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBA64.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:OpenGL.ColorRGBAF">
            <summary>
            RGBA color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBAF.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a ColorRGBAF specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:System.Single"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> that specify the blue component.
            </param>
        </member>
        <member name="M:OpenGL.ColorRGBAF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a ColorRGBAF specifying RGBA components.
            </summary>
            <param name="r">
            A <see cref="T:System.Single"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> that specify the blue component.
            </param>
            <param name="a">
            A <see cref="T:System.Single"/> that specify the alpha component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGBAF.r">
            <summary>
            Red color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAF.g">
            <summary>
            Green color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAF.b">
            <summary>
            Blue color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAF.a">
            <summary>
            Alpha color components.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBAF.op_Multiply(OpenGL.ColorRGBAF,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBAF"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.ColorRGBAF"/> that equals to the multiplication of <paramref name="a"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAF.op_Implicit(OpenGL.ColorRGBAF)~System.Single[]">
            <summary>
            Cast to float[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBAF"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAF.op_Implicit(OpenGL.ColorRGBAF)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBAF"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAF.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGBAF">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGBAF"/> initialized with the color components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAF.op_Equality(OpenGL.ColorRGBAF,OpenGL.ColorRGBAF)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.ColorRGBAF.op_Inequality(OpenGL.ColorRGBAF,OpenGL.ColorRGBAF)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.ColorRGBAF.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAF.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAF.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAF.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAF.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAF.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAF.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAF.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBAF.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBAF.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="M:OpenGL.ColorRGBAF.Equals(OpenGL.ColorRGBAF,System.Single)">
            <summary>
            Indicates whether the this ColorRGBAF is equal to another ColorRGBAF, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.ColorRGBAF"/> to compare with this ColorRGBAF.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this ColorRGBAF is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAF.Equals(OpenGL.ColorRGBAF)">
            <summary>
            Indicates whether the this ColorRGBAF is equal to another ColorRGBAF.
            </summary>
            <param name="other">
            An IVertex3 to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAF.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:OpenGL.ColorRGBAHF">
            <summary>
            RGBA color.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.#ctor(OpenGL.HalfFloat,OpenGL.HalfFloat,OpenGL.HalfFloat)">
            <summary>
            Construct a ColorRGBAHF specifying RGB components.
            </summary>
            <param name="r">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the blue component.
            </param>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.#ctor(OpenGL.HalfFloat,OpenGL.HalfFloat,OpenGL.HalfFloat,OpenGL.HalfFloat)">
            <summary>
            Construct a ColorRGBAHF specifying RGBA components.
            </summary>
            <param name="r">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the red component.
            </param>
            <param name="g">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the green component.
            </param>
            <param name="b">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the blue component.
            </param>
            <param name="a">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the alpha component.
            </param>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.r">
            <summary>
            Red color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.g">
            <summary>
            Green color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.b">
            <summary>
            Blue color components.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.a">
            <summary>
            Alpha color components.
            </summary>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.op_Multiply(OpenGL.ColorRGBAHF,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBAHF"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.ColorRGBAHF"/> that equals to the multiplication of <paramref name="a"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.op_Implicit(OpenGL.ColorRGBAHF)~OpenGL.HalfFloat[]">
            <summary>
            Cast to HalfFloat[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBAHF"/> to be casted.
            </param>
            <returns>
            A <see cref="T:HalfFloat[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.op_Implicit(OpenGL.ColorRGBAHF)~OpenGL.Vertex4hf">
            <summary>
            Cast to Vertex4hf operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.ColorRGBAHF"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4hf"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.op_Explicit(System.Drawing.Color)~OpenGL.ColorRGBAHF">
            <summary>
            Cast from Color operator.
            </summary>
            <param name="a">
            A <see cref="T:System.Drawing.Color"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ColorRGBAHF"/> initialized with the color components.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.op_Equality(OpenGL.ColorRGBAHF,OpenGL.ColorRGBAHF)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.op_Inequality(OpenGL.ColorRGBAHF,OpenGL.ColorRGBAHF)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.ColorWhite">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.ColorBlack">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.ColorRed">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.ColorGreen">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.ColorBlue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.ColorYellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.ColorMagenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:OpenGL.ColorRGBAHF.ColorCyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBAHF.PixelType">
            <summary>
            Get the PixelLayout correponding to this IColor.
            </summary>
        </member>
        <member name="P:OpenGL.ColorRGBAHF.Item(System.Int32)">
            <summary>
            Get of set color components.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> indicating the color component index.
            </param>
            <returns>
            The color component converted from a normalized floating point number.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
            </exception>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.Equals(OpenGL.ColorRGBAHF,OpenGL.HalfFloat)">
            <summary>
            Indicates whether the this ColorRGBAHF is equal to another ColorRGBAHF, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.ColorRGBAHF"/> to compare with this ColorRGBAHF.
            </param>
            <param name="precision">
            The <see cref="T:OpenGL.HalfFloat"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this ColorRGBAHF is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.Equals(OpenGL.ColorRGBAHF)">
            <summary>
            Indicates whether the this ColorRGBAHF is equal to another ColorRGBAHF.
            </summary>
            <param name="other">
            An IVertex3 to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.ColorRGBAHF.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:OpenGL.HalfFloat">
            <summary>
            HalfFloat floating-point number (16 bit).
            </summary>
        </member>
        <member name="M:OpenGL.HalfFloat.#ctor(System.Single)">
            <summary>
            Constuct a HalfFloat by specifying its value.
            </summary>
            <param name="f">
            Floating-point (single precision) number.
            </param>
        </member>
        <member name="F:OpenGL.HalfFloat._Bits">
            <summary>
            The half-float mBits.
            </summary>
        </member>
        <member name="M:OpenGL.HalfFloat.ToSingle">
            <summary>
            Converts the 16-bit half to 32-bit floating-point.
            </summary>
            <returns>
            A single-precision floating-point number equivalent to this HalfFloat.
            </returns>
        </member>
        <member name="M:OpenGL.HalfFloat.ToFloat(System.UInt16)">
            <summary>
            Converts the 16-bit half to 32-bit floating-point.
            </summary>
            <param name="ui16">
            A <see cref="T:System.UInt16"/> that specifies the bit representation of the half-precision
            floating-point.
            </param>
            <returns>
            A single-precision floating-point number equivalent to <paramref name="ui16"/>.
            </returns>
        </member>
        <member name="M:OpenGL.HalfFloat.HalfToFloat(System.UInt16)">
            <summary>
            Ported from OpenEXR's IlmBase 1.0.1
            </summary>
        </member>
        <member name="M:OpenGL.HalfFloat.FloatToHalf(System.Int32)">
            <summary>
            Ported from OpenEXR's IlmBase 1.0.1
            </summary>
        </member>
        <member name="M:OpenGL.HalfFloat.op_Explicit(System.Single)~OpenGL.HalfFloat">
            <summary>
            Converts a <see cref="T:System.Single"/> to a HalfFloat.
            </summary>
            <param name="f">
            A <see cref="T:System.Single"/> to convert.
            </param>
            <returns>
            A <see cref="T:OpenGL.HalfFloat"/> corresponding to <paramref name="f"/>.
            </returns>
        </member>
        <member name="M:OpenGL.HalfFloat.op_Implicit(OpenGL.HalfFloat)~System.Single">
            <summary>
            Converts a HalfFloat to a <see cref="T:System.Single"/>.
            </summary>
            <param name="h">
            A <see cref="T:OpenGL.HalfFloat"/> to convert.
            </param>
            <returns>
            A <see cref="T:System.Single"/> corresponding to <paramref name="h"/>.
            </returns>
        </member>
        <member name="M:OpenGL.HalfFloat.op_Implicit(OpenGL.HalfFloat)~System.Double">
            <summary>
            Converts a HalfFloat to a <see cref="T:System.Double"/>.
            </summary>
            <param name="h">
            A <see cref="T:OpenGL.HalfFloat"/> to convert.
            </param>
            <returns>
            A <see cref="T:System.Double"/> corresponding to <paramref name="h"/>.
            </returns>
        </member>
        <member name="F:OpenGL.HalfFloat.MinValue">
            <summary>
            Smallest positive value represented by a HalfFloat.
            </summary>
        </member>
        <member name="F:OpenGL.HalfFloat.MinNormalizedValue">
            <summary>
            Smallest positive (normalized) value represented by a HalfFloat.
            </summary>
        </member>
        <member name="F:OpenGL.HalfFloat.MaxValue">
            <summary>
            Largest positive value represented by a HalfFloat.
            </summary>
        </member>
        <member name="F:OpenGL.HalfFloat.Epsilon">
            <summary>
            Smallest positive value 'e' for which half(1.0 + e) != half(1.0).
            </summary>
        </member>
        <member name="P:OpenGL.HalfFloat.IsZero">
            <summary>
            Returns a boolean value indicating whether this half-float represents zero.
            </summary>
        </member>
        <member name="P:OpenGL.HalfFloat.IsNaN">
            <summary>
            Returns a boolean value indicating whether this half-float represents NaN (not a number).
            </summary>
        </member>
        <member name="P:OpenGL.HalfFloat.IsPositiveInfinity">
            <summary>
            Returns a boolean value indicating whether this half-float represents a positive infinite value.
            </summary>
        </member>
        <member name="P:OpenGL.HalfFloat.IsNegativeInfinity">
            <summary>
            Returns a boolean value indicating whether this half-float represents a negative infinite value.
            </summary>
        </member>
        <member name="M:OpenGL.HalfFloat.Parse(System.String)">
            <summary>
            Converts the string representation of a number to a HalfFloat.
            </summary>
            <param name="s">
            String representation of the number to convert.
            </param>
            <returns>
            A HalfFloat instance which value is represented by <paramref name="s"/>.
            </returns>
        </member>
        <member name="M:OpenGL.HalfFloat.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to a HalfFloat.
            </summary>
            <param name="s">
            String representation of the number to convert.
            </param>
            <param name="style">
            Specifies the format of <paramref name="s"/>.
            </param>
            <param name="provider">
            Culture-specific formatting information used in string parsing.
            </param>
            <returns>
            A HalfFloat instance which value is represented by <paramref name="s"/>.
            </returns>
        </member>
        <member name="M:OpenGL.HalfFloat.TryParse(System.String,OpenGL.HalfFloat@)">
            <summary>
            Converts the string representation of a number to a HalfFloat.
            </summary>
            <param name="s">
            String representation of the number to convert.
            </param>
            <param name="result">
            The parsed HalfFloat value.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="s"/> was parsed correctly to HalfFloat.
            </returns>
        </member>
        <member name="M:OpenGL.HalfFloat.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,OpenGL.HalfFloat@)">
            <summary>
            Converts the string representation of a number to a HalfFloat.
            </summary>
            <param name="s">
            String representation of the number to convert.
            </param>
            <param name="style">
            Specifies the format of <paramref name="s"/>.
            </param>
            <param name="provider">
            Culture-specific formatting information used in string parsing.
            </param>
            <param name="result">
            The parsed HalfFloat value.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="s"/> was parsed correctly to HalfFloat.
            </returns>
        </member>
        <member name="M:OpenGL.HalfFloat.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used by ISerializable to deserialize the object.
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="M:OpenGL.HalfFloat.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used by ISerialize to serialize the object.
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="M:OpenGL.HalfFloat.Equals(OpenGL.HalfFloat)">
            <summary>
            Returns a boolean value indicating whether this instance is equal to <paramref name="other"/>.
            </summary>
            <param name="other">
            The HalfFloat to be compared with this HalfFloat.
            </param>
            <returns>
            It returns a boolean value indicating whether <paramref name="other"/> euquals dst this instance.
            </returns>
        </member>
        <member name="M:OpenGL.HalfFloat.CompareTo(OpenGL.HalfFloat)">
            <summary>
            Compares this instance to a specified half-precision floating-point number
            and returns an integer that indicates whether the value of this instance
            is less than, equal to, or greater than the value of the specified half-precision
            floating-point number. 
            </summary>
            <param name="other">A half-precision floating-point number to compare.</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenGL.HalfFloat.ToString">
            <summary>
             Converts this HalfFloat into a human-legible string representation.
            </summary>
            <returns>
            The string representation of this instance.
            </returns>
        </member>
        <member name="M:OpenGL.HalfFloat.ToString(System.String,System.IFormatProvider)">
            <summary>
             Converts this HalfFloat into a human-legible string representation.
            </summary>
            <param name="format">
             Formatting for the output string.
            </param>
            <param name="formatProvider">
             Culture-specific formatting information.
            </param>
            <returns>
            The string representation of this instance.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix2x2f">
            <summary>
            Matrix composed by 2 columns and 2 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x2f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix2x2f specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c10">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 1.
            </param>
        </member>
        <member name="M:OpenGL.Matrix2x2f.#ctor(System.Single[])">
            <summary>
            Construct a Matrix2x2f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x2f.#ctor(System.Single[],System.UInt32)">
            <summary>
            Construct a Matrix2x2f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x2f.#ctor(OpenGL.Matrix2x2f)">
            <summary>
            Construct a Matrix2x2f specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix2x2f to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix2x2f._M00">
            <summary>
            Matrix2x2f component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x2f._M01">
            <summary>
            Matrix2x2f component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x2f._M10">
            <summary>
            Matrix2x2f component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x2f._M11">
            <summary>
            Matrix2x2f component: column 2, row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2f.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2f.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2f.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2f.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2f.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 2 column count, or if <paramref name="r"/>
            is greater than 2 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x2f.op_Multiply(OpenGL.Matrix2x2f,System.Single)">
            <summary>
            Multiply a Matrix2x2f with a float.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix2x2f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x2f"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.op_Multiply(OpenGL.Matrix2x2f,OpenGL.Vertex2f)">
            <summary>
            Multiply a Matrix2x2f with a Vertex2f.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix2x2f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2f"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> resulting from the product of the matrix <paramref name="m"/> and the vertex <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.op_Multiply(OpenGL.Matrix2x2f,OpenGL.Matrix2x2f)">
            <summary>
            Multiply two Matrix2x2f.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix2x2f"/> that specify the left multiplication operand.
            </param>
            <param name="n">
            A <see cref="T:OpenGL.Matrix2x2f"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x2f"/> resulting from the product of the matrix <paramref name="m"/> and the matrix <paramref name="n"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.op_Equality(OpenGL.Matrix2x2f,OpenGL.Matrix2x2f)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x2f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x2f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.op_Inequality(OpenGL.Matrix2x2f,OpenGL.Matrix2x2f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x2f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x2f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.op_Explicit(OpenGL.Matrix2x2f)~System.Single[]">
            <summary>
            Operator casting to float[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x2f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.op_Implicit(OpenGL.Matrix2x2f)~OpenGL.Matrix2x2d">
            <summary>
            Operator casting to Matrix2x2d.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x2f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x2d"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.RotatedZ(System.Single)">
            <summary>
            Construct a Matrix2x2f modelling a rotation around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x2f"/> representing a matrix rotating on Z axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.RotateZ(System.Single)">
            <summary>
            Rotates this Matrix2x2f around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="P:OpenGL.Matrix2x2f.Transposed">
            <summary>
            Compute the transpose of this Matrix2x2f.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x2f.Transpose">
            <summary>
            Transpose this Matrix2x2f.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2f.Determinant">
            <summary>
            Compute the determinant of this Matrix2x2f.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2f.Inverse">
            <summary>
            Compute the inverse of this Matrix2x2f.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x2f.Invert">
            <summary>
            Invert this Matrix2x2f.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x2f.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x2f.Identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x2f.Equals(OpenGL.Matrix2x2f,System.Single)">
            <summary>
            Indicates whether the this Matrix2x2f is equal to another Matrix2x2f, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x2f"/> to compare with this Matrix2x2f.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix2x2f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.Equals(OpenGL.Matrix2x2f)">
            <summary>
            Indicates whether the this Matrix2x2f is equal to another Matrix2x2f.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x2f"/> to compare with this Matrix2x2f.
            </param>
            <returns>
            It returns true if the this Matrix2x2f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2f.ToString">
            <summary>
            Stringify this Matrix2x2f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix2x2f.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix2x3f">
            <summary>
            Matrix composed by 2 columns and 3 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x3f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix2x3f specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c10">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 2.
            </param>
        </member>
        <member name="M:OpenGL.Matrix2x3f.#ctor(System.Single[])">
            <summary>
            Construct a Matrix2x3f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x3f.#ctor(System.Single[],System.UInt32)">
            <summary>
            Construct a Matrix2x3f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x3f.#ctor(OpenGL.Matrix2x3f)">
            <summary>
            Construct a Matrix2x3f specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix2x3f to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix2x3f._M00">
            <summary>
            Matrix2x3f component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3f._M01">
            <summary>
            Matrix2x3f component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3f._M02">
            <summary>
            Matrix2x3f component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3f._M10">
            <summary>
            Matrix2x3f component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3f._M11">
            <summary>
            Matrix2x3f component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3f._M12">
            <summary>
            Matrix2x3f component: column 2, row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3f.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3f.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3f.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3f.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3f.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3f.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 2 column count, or if <paramref name="r"/>
            is greater than 3 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x3f.op_Multiply(OpenGL.Matrix2x3f,System.Single)">
            <summary>
            Multiply a Matrix2x3f with a float.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix2x3f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x3f"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3f.op_Equality(OpenGL.Matrix2x3f,OpenGL.Matrix2x3f)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x3f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x3f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3f.op_Inequality(OpenGL.Matrix2x3f,OpenGL.Matrix2x3f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x3f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x3f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3f.op_Explicit(OpenGL.Matrix2x3f)~System.Single[]">
            <summary>
            Operator casting to float[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x3f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3f.op_Implicit(OpenGL.Matrix2x3f)~OpenGL.Matrix2x3d">
            <summary>
            Operator casting to Matrix2x3d.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x3f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x3d"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix2x3f.Transposed">
            <summary>
            Compute the transpose of this Matrix2x3f.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3f.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x3f.Equals(OpenGL.Matrix2x3f,System.Single)">
            <summary>
            Indicates whether the this Matrix2x3f is equal to another Matrix2x3f, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x3f"/> to compare with this Matrix2x3f.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix2x3f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3f.Equals(OpenGL.Matrix2x3f)">
            <summary>
            Indicates whether the this Matrix2x3f is equal to another Matrix2x3f.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x3f"/> to compare with this Matrix2x3f.
            </param>
            <returns>
            It returns true if the this Matrix2x3f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3f.ToString">
            <summary>
            Stringify this Matrix2x3f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix2x3f.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix2x4f">
            <summary>
            Matrix composed by 2 columns and 4 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x4f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix2x4f specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c03">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 3.
            </param>
            <param name="c10">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 2.
            </param>
            <param name="c13">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 3.
            </param>
        </member>
        <member name="M:OpenGL.Matrix2x4f.#ctor(System.Single[])">
            <summary>
            Construct a Matrix2x4f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x4f.#ctor(System.Single[],System.UInt32)">
            <summary>
            Construct a Matrix2x4f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x4f.#ctor(OpenGL.Matrix2x4f)">
            <summary>
            Construct a Matrix2x4f specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix2x4f to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix2x4f._M00">
            <summary>
            Matrix2x4f component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4f._M01">
            <summary>
            Matrix2x4f component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4f._M02">
            <summary>
            Matrix2x4f component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4f._M03">
            <summary>
            Matrix2x4f component: column 1, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4f._M10">
            <summary>
            Matrix2x4f component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4f._M11">
            <summary>
            Matrix2x4f component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4f._M12">
            <summary>
            Matrix2x4f component: column 2, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4f._M13">
            <summary>
            Matrix2x4f component: column 2, row 4.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4f.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4f.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4f.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4f.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4f.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4f.Row3">
            <summary>
            Get the row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4f.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 2 column count, or if <paramref name="r"/>
            is greater than 4 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x4f.op_Multiply(OpenGL.Matrix2x4f,System.Single)">
            <summary>
            Multiply a Matrix2x4f with a float.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix2x4f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x4f"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4f.op_Equality(OpenGL.Matrix2x4f,OpenGL.Matrix2x4f)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x4f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x4f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4f.op_Inequality(OpenGL.Matrix2x4f,OpenGL.Matrix2x4f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x4f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x4f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4f.op_Explicit(OpenGL.Matrix2x4f)~System.Single[]">
            <summary>
            Operator casting to float[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x4f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4f.op_Implicit(OpenGL.Matrix2x4f)~OpenGL.Matrix2x4d">
            <summary>
            Operator casting to Matrix2x4d.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x4f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x4d"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix2x4f.Transposed">
            <summary>
            Compute the transpose of this Matrix2x4f.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4f.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x4f.Equals(OpenGL.Matrix2x4f,System.Single)">
            <summary>
            Indicates whether the this Matrix2x4f is equal to another Matrix2x4f, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x4f"/> to compare with this Matrix2x4f.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix2x4f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4f.Equals(OpenGL.Matrix2x4f)">
            <summary>
            Indicates whether the this Matrix2x4f is equal to another Matrix2x4f.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x4f"/> to compare with this Matrix2x4f.
            </param>
            <returns>
            It returns true if the this Matrix2x4f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4f.ToString">
            <summary>
            Stringify this Matrix2x4f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix2x4f.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix3x2f">
            <summary>
            Matrix composed by 3 columns and 2 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x2f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix3x2f specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c10">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c20">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 1.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x2f.#ctor(System.Single[])">
            <summary>
            Construct a Matrix3x2f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x2f.#ctor(System.Single[],System.UInt32)">
            <summary>
            Construct a Matrix3x2f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x2f.#ctor(OpenGL.Matrix3x2f)">
            <summary>
            Construct a Matrix3x2f specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix3x2f to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix3x2f._M00">
            <summary>
            Matrix3x2f component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2f._M01">
            <summary>
            Matrix3x2f component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2f._M10">
            <summary>
            Matrix3x2f component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2f._M11">
            <summary>
            Matrix3x2f component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2f._M20">
            <summary>
            Matrix3x2f component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2f._M21">
            <summary>
            Matrix3x2f component: column 3, row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2f.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2f.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2f.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2f.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2f.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2f.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 3 column count, or if <paramref name="r"/>
            is greater than 2 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x2f.op_Multiply(OpenGL.Matrix3x2f,System.Single)">
            <summary>
            Multiply a Matrix3x2f with a float.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x2f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x2f"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2f.op_Equality(OpenGL.Matrix3x2f,OpenGL.Matrix3x2f)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x2f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x2f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2f.op_Inequality(OpenGL.Matrix3x2f,OpenGL.Matrix3x2f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x2f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x2f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2f.op_Explicit(OpenGL.Matrix3x2f)~System.Single[]">
            <summary>
            Operator casting to float[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x2f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2f.op_Implicit(OpenGL.Matrix3x2f)~OpenGL.Matrix3x2d">
            <summary>
            Operator casting to Matrix3x2d.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x2f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x2d"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix3x2f.Transposed">
            <summary>
            Compute the transpose of this Matrix3x2f.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2f.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x2f.Equals(OpenGL.Matrix3x2f,System.Single)">
            <summary>
            Indicates whether the this Matrix3x2f is equal to another Matrix3x2f, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x2f"/> to compare with this Matrix3x2f.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix3x2f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2f.Equals(OpenGL.Matrix3x2f)">
            <summary>
            Indicates whether the this Matrix3x2f is equal to another Matrix3x2f.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x2f"/> to compare with this Matrix3x2f.
            </param>
            <returns>
            It returns true if the this Matrix3x2f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2f.ToString">
            <summary>
            Stringify this Matrix3x2f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix3x2f.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix3x3f">
            <summary>
            Matrix composed by 3 columns and 3 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x3f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix3x3f specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c10">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 2.
            </param>
            <param name="c20">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 1.
            </param>
            <param name="c22">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 2.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x3f.#ctor(System.Single[])">
            <summary>
            Construct a Matrix3x3f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x3f.#ctor(System.Single[],System.UInt32)">
            <summary>
            Construct a Matrix3x3f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x3f.#ctor(OpenGL.Matrix3x3f)">
            <summary>
            Construct a Matrix3x3f specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix3x3f to be copied into this instance.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x3f.#ctor(OpenGL.Matrix4x4f,System.UInt32,System.UInt32)">
            <summary>
            Construct the complement matrix of a Matrix4x4f.
            </summary>
            <param name="other">
            The Matrix4x4f to be copied into this instance.
            </param>
            <param name="c">
            The index of column to be excluded to construct the complement matrix.
            </param>
            <param name="r">
            The index of row to be excluded to construct the complement matrix.
            </param>
        </member>
        <member name="F:OpenGL.Matrix3x3f._M00">
            <summary>
            Matrix3x3f component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3f._M01">
            <summary>
            Matrix3x3f component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3f._M02">
            <summary>
            Matrix3x3f component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3f._M10">
            <summary>
            Matrix3x3f component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3f._M11">
            <summary>
            Matrix3x3f component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3f._M12">
            <summary>
            Matrix3x3f component: column 2, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3f._M20">
            <summary>
            Matrix3x3f component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3f._M21">
            <summary>
            Matrix3x3f component: column 3, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3f._M22">
            <summary>
            Matrix3x3f component: column 3, row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3f.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3f.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3f.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3f.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3f.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3f.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3f.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 3 column count, or if <paramref name="r"/>
            is greater than 3 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x3f.op_Multiply(OpenGL.Matrix3x3f,System.Single)">
            <summary>
            Multiply a Matrix3x3f with a float.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3f"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.op_Multiply(OpenGL.Matrix3x3f,OpenGL.Vertex3f)">
            <summary>
            Multiply a Matrix3x3f with a Vertex3f.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> resulting from the product of the matrix <paramref name="m"/> and the vertex <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.op_Multiply(OpenGL.Matrix3x3f,OpenGL.Matrix3x3f)">
            <summary>
            Multiply two Matrix3x3f.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3f"/> that specify the left multiplication operand.
            </param>
            <param name="n">
            A <see cref="T:OpenGL.Matrix3x3f"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3f"/> resulting from the product of the matrix <paramref name="m"/> and the matrix <paramref name="n"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.op_Equality(OpenGL.Matrix3x3f,OpenGL.Matrix3x3f)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x3f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x3f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.op_Inequality(OpenGL.Matrix3x3f,OpenGL.Matrix3x3f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x3f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x3f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.op_Explicit(OpenGL.Matrix3x3f)~System.Single[]">
            <summary>
            Operator casting to float[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x3f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.op_Implicit(OpenGL.Matrix3x3f)~OpenGL.Matrix3x3d">
            <summary>
            Operator casting to Matrix3x3d.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x3f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3d"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.RotatedX(System.Single)">
            <summary>
            Construct a Matrix3x3f modelling a rotation around the X axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3f"/> representing a matrix rotating on X axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.RotateX(System.Single)">
            <summary>
            Rotates this Matrix3x3f around the X axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x3f.RotatedY(System.Single)">
            <summary>
            Construct a Matrix3x3f modelling a rotation around the Y axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3f"/> representing a matrix rotating on Y axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.RotateY(System.Single)">
            <summary>
            Rotates this Matrix3x3f around the Y axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x3f.RotatedZ(System.Single)">
            <summary>
            Construct a Matrix3x3f modelling a rotation around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3f"/> representing a matrix rotating on Z axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.RotateZ(System.Single)">
            <summary>
            Rotates this Matrix3x3f around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x3f.Scaled(System.Single,System.Single,System.Single)">
            <summary>
            Compute the scaled of this Matrix3x3f.
            </summary>
            <param name="x">
            A <see cref="T:System.Single"/> that specifies the scale on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> that specifies the scale on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> that specifies the scale on Z axis.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3f"/> representing a scaling matrix.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scale this Matrix3x3f.
            </summary>
            <param name="x">
            A <see cref="T:System.Single"/> that specifies the scale on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> that specifies the scale on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> that specifies the scale on Z axis.
            </param>
        </member>
        <member name="P:OpenGL.Matrix3x3f.Transposed">
            <summary>
            Compute the transpose of this Matrix3x3f.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x3f.Transpose">
            <summary>
            Transpose this Matrix3x3f.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3f.Determinant">
            <summary>
            Compute the determinant of this Matrix3x3f.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3f.Inverse">
            <summary>
            Compute the inverse of this Matrix3x3f.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x3f.Invert">
            <summary>
            Invert this Matrix3x3f.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3f.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3f.Identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x3f.Equals(OpenGL.Matrix3x3f,System.Single)">
            <summary>
            Indicates whether the this Matrix3x3f is equal to another Matrix3x3f, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x3f"/> to compare with this Matrix3x3f.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix3x3f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.Equals(OpenGL.Matrix3x3f)">
            <summary>
            Indicates whether the this Matrix3x3f is equal to another Matrix3x3f.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x3f"/> to compare with this Matrix3x3f.
            </param>
            <returns>
            It returns true if the this Matrix3x3f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3f.ToString">
            <summary>
            Stringify this Matrix3x3f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix3x3f.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix3x4f">
            <summary>
            Matrix composed by 3 columns and 4 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x4f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix3x4f specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c03">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 3.
            </param>
            <param name="c10">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 2.
            </param>
            <param name="c13">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 3.
            </param>
            <param name="c20">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 1.
            </param>
            <param name="c22">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 2.
            </param>
            <param name="c23">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 3.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x4f.#ctor(System.Single[])">
            <summary>
            Construct a Matrix3x4f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x4f.#ctor(System.Single[],System.UInt32)">
            <summary>
            Construct a Matrix3x4f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x4f.#ctor(OpenGL.Matrix3x4f)">
            <summary>
            Construct a Matrix3x4f specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix3x4f to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M00">
            <summary>
            Matrix3x4f component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M01">
            <summary>
            Matrix3x4f component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M02">
            <summary>
            Matrix3x4f component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M03">
            <summary>
            Matrix3x4f component: column 1, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M10">
            <summary>
            Matrix3x4f component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M11">
            <summary>
            Matrix3x4f component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M12">
            <summary>
            Matrix3x4f component: column 2, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M13">
            <summary>
            Matrix3x4f component: column 2, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M20">
            <summary>
            Matrix3x4f component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M21">
            <summary>
            Matrix3x4f component: column 3, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M22">
            <summary>
            Matrix3x4f component: column 3, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f._M23">
            <summary>
            Matrix3x4f component: column 3, row 4.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4f.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4f.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4f.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4f.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4f.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4f.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4f.Row3">
            <summary>
            Get the row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4f.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 3 column count, or if <paramref name="r"/>
            is greater than 4 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x4f.op_Multiply(OpenGL.Matrix3x4f,System.Single)">
            <summary>
            Multiply a Matrix3x4f with a float.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x4f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x4f"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4f.op_Equality(OpenGL.Matrix3x4f,OpenGL.Matrix3x4f)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x4f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x4f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4f.op_Inequality(OpenGL.Matrix3x4f,OpenGL.Matrix3x4f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x4f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x4f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4f.op_Explicit(OpenGL.Matrix3x4f)~System.Single[]">
            <summary>
            Operator casting to float[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x4f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4f.op_Implicit(OpenGL.Matrix3x4f)~OpenGL.Matrix3x4d">
            <summary>
            Operator casting to Matrix3x4d.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x4f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x4d"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix3x4f.Transposed">
            <summary>
            Compute the transpose of this Matrix3x4f.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4f.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x4f.Equals(OpenGL.Matrix3x4f,System.Single)">
            <summary>
            Indicates whether the this Matrix3x4f is equal to another Matrix3x4f, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x4f"/> to compare with this Matrix3x4f.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix3x4f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4f.Equals(OpenGL.Matrix3x4f)">
            <summary>
            Indicates whether the this Matrix3x4f is equal to another Matrix3x4f.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x4f"/> to compare with this Matrix3x4f.
            </param>
            <returns>
            It returns true if the this Matrix3x4f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4f.ToString">
            <summary>
            Stringify this Matrix3x4f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix3x4f.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix4x2f">
            <summary>
            Matrix composed by 4 columns and 2 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x2f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix4x2f specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c10">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c20">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 1.
            </param>
            <param name="c30">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 3 and row 0.
            </param>
            <param name="c31">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 3 and row 1.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x2f.#ctor(System.Single[])">
            <summary>
            Construct a Matrix4x2f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x2f.#ctor(System.Single[],System.UInt32)">
            <summary>
            Construct a Matrix4x2f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x2f.#ctor(OpenGL.Matrix4x2f)">
            <summary>
            Construct a Matrix4x2f specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix4x2f to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix4x2f._M00">
            <summary>
            Matrix4x2f component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2f._M01">
            <summary>
            Matrix4x2f component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2f._M10">
            <summary>
            Matrix4x2f component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2f._M11">
            <summary>
            Matrix4x2f component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2f._M20">
            <summary>
            Matrix4x2f component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2f._M21">
            <summary>
            Matrix4x2f component: column 3, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2f._M30">
            <summary>
            Matrix4x2f component: column 4, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2f._M31">
            <summary>
            Matrix4x2f component: column 4, row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2f.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2f.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2f.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2f.Column3">
            <summary>
            Get the column 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2f.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2f.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2f.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 4 column count, or if <paramref name="r"/>
            is greater than 2 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x2f.op_Multiply(OpenGL.Matrix4x2f,System.Single)">
            <summary>
            Multiply a Matrix4x2f with a float.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x2f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x2f"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2f.op_Equality(OpenGL.Matrix4x2f,OpenGL.Matrix4x2f)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x2f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x2f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2f.op_Inequality(OpenGL.Matrix4x2f,OpenGL.Matrix4x2f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x2f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x2f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2f.op_Explicit(OpenGL.Matrix4x2f)~System.Single[]">
            <summary>
            Operator casting to float[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x2f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2f.op_Implicit(OpenGL.Matrix4x2f)~OpenGL.Matrix4x2d">
            <summary>
            Operator casting to Matrix4x2d.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x2f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x2d"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix4x2f.Transposed">
            <summary>
            Compute the transpose of this Matrix4x2f.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2f.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x2f.Equals(OpenGL.Matrix4x2f,System.Single)">
            <summary>
            Indicates whether the this Matrix4x2f is equal to another Matrix4x2f, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x2f"/> to compare with this Matrix4x2f.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix4x2f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2f.Equals(OpenGL.Matrix4x2f)">
            <summary>
            Indicates whether the this Matrix4x2f is equal to another Matrix4x2f.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x2f"/> to compare with this Matrix4x2f.
            </param>
            <returns>
            It returns true if the this Matrix4x2f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2f.ToString">
            <summary>
            Stringify this Matrix4x2f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix4x2f.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix4x3f">
            <summary>
            Matrix composed by 4 columns and 3 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x3f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix4x3f specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c10">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 2.
            </param>
            <param name="c20">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 1.
            </param>
            <param name="c22">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 2.
            </param>
            <param name="c30">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 3 and row 0.
            </param>
            <param name="c31">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 3 and row 1.
            </param>
            <param name="c32">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 3 and row 2.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x3f.#ctor(System.Single[])">
            <summary>
            Construct a Matrix4x3f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x3f.#ctor(System.Single[],System.UInt32)">
            <summary>
            Construct a Matrix4x3f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x3f.#ctor(OpenGL.Matrix4x3f)">
            <summary>
            Construct a Matrix4x3f specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix4x3f to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M00">
            <summary>
            Matrix4x3f component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M01">
            <summary>
            Matrix4x3f component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M02">
            <summary>
            Matrix4x3f component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M10">
            <summary>
            Matrix4x3f component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M11">
            <summary>
            Matrix4x3f component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M12">
            <summary>
            Matrix4x3f component: column 2, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M20">
            <summary>
            Matrix4x3f component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M21">
            <summary>
            Matrix4x3f component: column 3, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M22">
            <summary>
            Matrix4x3f component: column 3, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M30">
            <summary>
            Matrix4x3f component: column 4, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M31">
            <summary>
            Matrix4x3f component: column 4, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f._M32">
            <summary>
            Matrix4x3f component: column 4, row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3f.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3f.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3f.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3f.Column3">
            <summary>
            Get the column 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3f.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3f.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3f.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3f.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 4 column count, or if <paramref name="r"/>
            is greater than 3 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x3f.op_Multiply(OpenGL.Matrix4x3f,System.Single)">
            <summary>
            Multiply a Matrix4x3f with a float.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x3f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x3f"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3f.op_Equality(OpenGL.Matrix4x3f,OpenGL.Matrix4x3f)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x3f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x3f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3f.op_Inequality(OpenGL.Matrix4x3f,OpenGL.Matrix4x3f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x3f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x3f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3f.op_Explicit(OpenGL.Matrix4x3f)~System.Single[]">
            <summary>
            Operator casting to float[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x3f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3f.op_Implicit(OpenGL.Matrix4x3f)~OpenGL.Matrix4x3d">
            <summary>
            Operator casting to Matrix4x3d.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x3f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x3d"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix4x3f.Transposed">
            <summary>
            Compute the transpose of this Matrix4x3f.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3f.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x3f.Equals(OpenGL.Matrix4x3f,System.Single)">
            <summary>
            Indicates whether the this Matrix4x3f is equal to another Matrix4x3f, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x3f"/> to compare with this Matrix4x3f.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix4x3f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3f.Equals(OpenGL.Matrix4x3f)">
            <summary>
            Indicates whether the this Matrix4x3f is equal to another Matrix4x3f.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x3f"/> to compare with this Matrix4x3f.
            </param>
            <returns>
            It returns true if the this Matrix4x3f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3f.ToString">
            <summary>
            Stringify this Matrix4x3f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix4x3f.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix4x4f">
            <summary>
            Matrix composed by 4 columns and 4 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x4f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix4x4f specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c03">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 0 and row 3.
            </param>
            <param name="c10">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 2.
            </param>
            <param name="c13">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 1 and row 3.
            </param>
            <param name="c20">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 1.
            </param>
            <param name="c22">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 2.
            </param>
            <param name="c23">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 2 and row 3.
            </param>
            <param name="c30">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 3 and row 0.
            </param>
            <param name="c31">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 3 and row 1.
            </param>
            <param name="c32">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 3 and row 2.
            </param>
            <param name="c33">
            A <see cref="T:System.Single" /> that specifies the matrix component at column 3 and row 3.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x4f.#ctor(System.Single[])">
            <summary>
            Construct a Matrix4x4f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4f.#ctor(System.Single[],System.UInt32)">
            <summary>
            Construct a Matrix4x4f specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4f.#ctor(OpenGL.Matrix4x4f)">
            <summary>
            Construct a Matrix4x4f specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix4x4f to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M00">
            <summary>
            Matrix4x4f component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M01">
            <summary>
            Matrix4x4f component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M02">
            <summary>
            Matrix4x4f component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M03">
            <summary>
            Matrix4x4f component: column 1, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M10">
            <summary>
            Matrix4x4f component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M11">
            <summary>
            Matrix4x4f component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M12">
            <summary>
            Matrix4x4f component: column 2, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M13">
            <summary>
            Matrix4x4f component: column 2, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M20">
            <summary>
            Matrix4x4f component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M21">
            <summary>
            Matrix4x4f component: column 3, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M22">
            <summary>
            Matrix4x4f component: column 3, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M23">
            <summary>
            Matrix4x4f component: column 3, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M30">
            <summary>
            Matrix4x4f component: column 4, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M31">
            <summary>
            Matrix4x4f component: column 4, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M32">
            <summary>
            Matrix4x4f component: column 4, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f._M33">
            <summary>
            Matrix4x4f component: column 4, row 4.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Column3">
            <summary>
            Get the column 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Row3">
            <summary>
            Get the row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 4 column count, or if <paramref name="r"/>
            is greater than 4 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4f.op_Multiply(OpenGL.Matrix4x4f,System.Single)">
            <summary>
            Multiply a Matrix4x4f with a float.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Single"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4f"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.op_Multiply(OpenGL.Matrix4x4f,OpenGL.Vertex4f)">
            <summary>
            Multiply a Matrix4x4f with a Vertex4f.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4f"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4f"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> resulting from the product of the matrix <paramref name="m"/> and the vertex <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.op_Multiply(OpenGL.Matrix4x4f,OpenGL.Matrix4x4f)">
            <summary>
            Multiply two Matrix4x4f.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4f"/> that specify the left multiplication operand.
            </param>
            <param name="n">
            A <see cref="T:OpenGL.Matrix4x4f"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4f"/> resulting from the product of the matrix <paramref name="m"/> and the matrix <paramref name="n"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.op_Equality(OpenGL.Matrix4x4f,OpenGL.Matrix4x4f)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x4f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x4f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.op_Inequality(OpenGL.Matrix4x4f,OpenGL.Matrix4x4f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x4f"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x4f"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.op_Explicit(OpenGL.Matrix4x4f)~System.Single[]">
            <summary>
            Operator casting to float[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x4f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.op_Implicit(OpenGL.Matrix4x4f)~OpenGL.Matrix4x4d">
            <summary>
            Operator casting to Matrix4x4d.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x4f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4d"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix4x4f modelling an orthographic projection.
            </summary>
            <param name="left">
            A <see cref="T:System.Single"/> indicating the distance of the left plane, in world units.
            </param>
            <param name="right">
            A <see cref="T:System.Single"/> indicating the distance of the right plane, in world units
            </param>
            <param name="bottom">
            A <see cref="T:System.Single"/> indicating the distance of the bottom plane, in world units
            </param>
            <param name="top">
            A <see cref="T:System.Single"/> indicating the distance of the top plane, in world units
            </param>
            <param name="near">
            A <see cref="T:System.Single"/> indicating the distance of the near plane, in world units
            </param>
            <param name="far">
            A <see cref="T:System.Single"/> indicating the distance of the far plane, in world units
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4f"/> representing an orthographic projection matrix.
            </returns>
            <exception cref="T:System.ArgumentException">
            Exception thrown if the parameter have an invalid set of values.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Ortho2D(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix4x4f modelling a 2D orthographic projection.
            </summary>
            <param name="left">
            A <see cref="T:System.Single"/> indicating the distance of the left plane, in world units.
            </param>
            <param name="right">
            A <see cref="T:System.Single"/> indicating the distance of the right plane, in world units
            </param>
            <param name="bottom">
            A <see cref="T:System.Single"/> indicating the distance of the bottom plane, in world units
            </param>
            <param name="top">
            A <see cref="T:System.Single"/> indicating the distance of the top plane, in world units
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4f"/> representing a 2D orthographic projection matrix.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Frustrum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix4x4f modelling a frustrum perspective projection matrix.
            </summary>
            <param name="left">
            A <see cref="T:System.Single"/> that specifies the frustum left plane distance.
            </param>
            <param name="right">
            A <see cref="T:System.Single"/> that specifies the frustum right plane distance.
            </param>
            <param name="bottom">
            A <see cref="T:System.Single"/> that specifies the frustum bottom plane distance.
            </param>
            <param name="top">
            A <see cref="T:System.Single"/> that specifies the frustum top plane distance.
            </param>
            <param name="near">
            A <see cref="T:System.Single"/> that specifies the frustum near plane distance.
            </param>
            <param name="far">
            A <see cref="T:System.Single"/> that specifies the frustum far plane distance.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if the parameter have an invalid set of values.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix4x4f modelling a frustrum perspective projection matrix, using FOV angle.
            </summary>
            <param name="fovy">
            A <see cref="T:System.Single"/> that specifies the vertical Field Of View angle, in degrees.
            </param>
            <param name="aspectRatio">
            A <see cref="T:System.Single"/> that specifies the view aspect ratio (i.e. the width / height ratio).
            </param>
            <param name="near">
            A <see cref="T:System.Single"/> that specifies the distance of the frustum near plane.
            </param>
            <param name="far">
            A <see cref="T:System.Single"/> that specifies the distance of the frustum far plane.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception thrown if at least one parameter has an invalid value.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Perspective(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix4x4f modelling an asymmetric frustrum perspective projection matrix, using FOV angles.
            </summary>
            <param name="leftFov">
            A <see cref="T:System.Single"/> that specifies the left plane FOV angle, in degrees.
            </param>
            <param name="rightFov">
            A <see cref="T:System.Single"/> that specifies the right plane FOV angle, in degrees.
            </param>
            <param name="bottomFov">
            A <see cref="T:System.Single"/> that specifies the bottom plane FOV angle, in degrees.
            </param>
            <param name="topFov">
            A <see cref="T:System.Single"/> that specifies the top plane FOV angle, in degrees.
            </param>
            <param name="near">
            A <see cref="T:System.Single"/> that specifies the distance of the frustum near plane.
            </param>
            <param name="far">
            A <see cref="T:System.Single"/> that specifies the distance of the frustum far plane.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception thrown if at least one parameter has an invalid value.
            </exception>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Position">
            <summary>
            Get the translation of this Matrix4x4f.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.ForwardVector">
            <summary>
            Get the forward vector of this Matrix4x4f.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.RightVector">
            <summary>
            Get the right vector of this Matrix4x4f.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.UpVector">
            <summary>
            Get the up vector of this Matrix4x4f.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x4f.LookAt(OpenGL.Vertex3f,OpenGL.Vertex3f,OpenGL.Vertex3f)">
            <summary>
            Construct a Matrix4x4f modelling a view transformation.
            </summary>
            <param name="eyePosition">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the eye position, in local coordinates.
            </param>
            <param name="targetPosition">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the eye target position, in local coordinates.
            </param>
            <param name="upVector">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the up vector of the view camera abstraction.
            </param>
            <returns>
            It returns a view transformation matrix used to transform the world coordinate, in order to view
            the world from <paramref name="eyePosition"/>, looking at <paramref name="targetPosition"/> having
            an up direction equal to <paramref name="upVector"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.LookAtDirection(OpenGL.Vertex3f,OpenGL.Vertex3f,OpenGL.Vertex3f)">
            <summary>
            Construct a Matrix4x4f modelling a view transformation.
            </summary>
            <param name="eyePosition">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the eye position, in local coordinates.
            </param>
            <param name="forwardVector">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the direction of the view. It will be normalized.
            </param>
            <param name="upVector">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the up vector of the view camera abstraction. It will be normalized
            </param>
            <returns>
            It returns a view transformation matrix used to transform the world coordinate, in order to view
            the world from <paramref name="eyePosition"/>, looking at <paramref name="forwardVector"/> having
            an up direction equal to <paramref name="upVector"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Translated(System.Single,System.Single,System.Single)">
            <summary>
            Construct a Matrix4x4f modelling a translation.
            </summary>
            <param name="x">
            A <see cref="T:System.Single"/> that specifies the translation on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> that specifies the translation on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> that specifies the translation on Z axis.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4f"/> representing a translation matrix.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Translate(System.Single,System.Single,System.Single)">
            <summary>
            Translates this Matrix4x4f.
            </summary>
            <param name="x">
            A <see cref="T:System.Single"/> that specifies the translation on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> that specifies the translation on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> that specifies the translation on Z axis.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x4f.RotatedX(System.Single)">
            <summary>
            Construct a Matrix4x4f modelling a rotation around the X axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4f"/> representing a matrix rotating on X axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.RotateX(System.Single)">
            <summary>
            Rotates this Matrix4x4f around the X axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x4f.RotatedY(System.Single)">
            <summary>
            Construct a Matrix4x4f modelling a rotation around the Y axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4f"/> representing a matrix rotating on Y axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.RotateY(System.Single)">
            <summary>
            Rotates this Matrix4x4f around the Y axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x4f.RotatedZ(System.Single)">
            <summary>
            Construct a Matrix4x4f modelling a rotation around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4f"/> representing a matrix rotating on Z axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.RotateZ(System.Single)">
            <summary>
            Rotates this Matrix4x4f around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Single"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Scaled(System.Single,System.Single,System.Single)">
            <summary>
            Compute the scaled of this Matrix4x4f.
            </summary>
            <param name="x">
            A <see cref="T:System.Single"/> that specifies the scale on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> that specifies the scale on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> that specifies the scale on Z axis.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4f"/> representing a scaling matrix.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scale this Matrix4x4f.
            </summary>
            <param name="x">
            A <see cref="T:System.Single"/> that specifies the scale on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> that specifies the scale on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> that specifies the scale on Z axis.
            </param>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Transposed">
            <summary>
            Compute the transpose of this Matrix4x4f.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Transpose">
            <summary>
            Transpose this Matrix4x4f.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Determinant">
            <summary>
            Compute the determinant of this Matrix4x4f.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4f.Inverse">
            <summary>
            Compute the inverse of this Matrix4x4f.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Invert">
            <summary>
            Invert this Matrix4x4f.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4f.Identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Equals(OpenGL.Matrix4x4f,System.Single)">
            <summary>
            Indicates whether the this Matrix4x4f is equal to another Matrix4x4f, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x4f"/> to compare with this Matrix4x4f.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix4x4f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Equals(OpenGL.Matrix4x4f)">
            <summary>
            Indicates whether the this Matrix4x4f is equal to another Matrix4x4f.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x4f"/> to compare with this Matrix4x4f.
            </param>
            <returns>
            It returns true if the this Matrix4x4f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4f.ToString">
            <summary>
            Stringify this Matrix4x4f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix4x4f.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix2x2d">
            <summary>
            Matrix composed by 2 columns and 2 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x2d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix2x2d specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c10">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 1.
            </param>
        </member>
        <member name="M:OpenGL.Matrix2x2d.#ctor(System.Double[])">
            <summary>
            Construct a Matrix2x2d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x2d.#ctor(System.Double[],System.UInt32)">
            <summary>
            Construct a Matrix2x2d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x2d.#ctor(OpenGL.Matrix2x2d)">
            <summary>
            Construct a Matrix2x2d specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix2x2d to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix2x2d._M00">
            <summary>
            Matrix2x2d component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x2d._M01">
            <summary>
            Matrix2x2d component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x2d._M10">
            <summary>
            Matrix2x2d component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x2d._M11">
            <summary>
            Matrix2x2d component: column 2, row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2d.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2d.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2d.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2d.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2d.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 2 column count, or if <paramref name="r"/>
            is greater than 2 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x2d.op_Multiply(OpenGL.Matrix2x2d,System.Double)">
            <summary>
            Multiply a Matrix2x2d with a double.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix2x2d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x2d"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.op_Multiply(OpenGL.Matrix2x2d,OpenGL.Vertex2d)">
            <summary>
            Multiply a Matrix2x2d with a Vertex2d.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix2x2d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex2d"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2d"/> resulting from the product of the matrix <paramref name="m"/> and the vertex <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.op_Multiply(OpenGL.Matrix2x2d,OpenGL.Matrix2x2d)">
            <summary>
            Multiply two Matrix2x2d.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix2x2d"/> that specify the left multiplication operand.
            </param>
            <param name="n">
            A <see cref="T:OpenGL.Matrix2x2d"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x2d"/> resulting from the product of the matrix <paramref name="m"/> and the matrix <paramref name="n"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.op_Equality(OpenGL.Matrix2x2d,OpenGL.Matrix2x2d)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x2d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x2d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.op_Inequality(OpenGL.Matrix2x2d,OpenGL.Matrix2x2d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x2d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x2d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.op_Explicit(OpenGL.Matrix2x2d)~System.Double[]">
            <summary>
            Operator casting to double[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x2d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.op_Explicit(OpenGL.Matrix2x2d)~OpenGL.Matrix2x2f">
            <summary>
            Operator casting to Matrix2x2f.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x2d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x2f"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.RotatedZ(System.Double)">
            <summary>
            Construct a Matrix2x2d modelling a rotation around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x2d"/> representing a matrix rotating on Z axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.RotateZ(System.Double)">
            <summary>
            Rotates this Matrix2x2d around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="P:OpenGL.Matrix2x2d.Transposed">
            <summary>
            Compute the transpose of this Matrix2x2d.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x2d.Transpose">
            <summary>
            Transpose this Matrix2x2d.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2d.Determinant">
            <summary>
            Compute the determinant of this Matrix2x2d.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x2d.Inverse">
            <summary>
            Compute the inverse of this Matrix2x2d.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x2d.Invert">
            <summary>
            Invert this Matrix2x2d.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x2d.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x2d.Identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x2d.Equals(OpenGL.Matrix2x2d,System.Double)">
            <summary>
            Indicates whether the this Matrix2x2d is equal to another Matrix2x2d, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x2d"/> to compare with this Matrix2x2d.
            </param>
            <param name="precision">
            The <see cref="T:System.Double"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix2x2d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.Equals(OpenGL.Matrix2x2d)">
            <summary>
            Indicates whether the this Matrix2x2d is equal to another Matrix2x2d.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x2d"/> to compare with this Matrix2x2d.
            </param>
            <returns>
            It returns true if the this Matrix2x2d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x2d.ToString">
            <summary>
            Stringify this Matrix2x2d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix2x2d.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix2x3d">
            <summary>
            Matrix composed by 2 columns and 3 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix2x3d specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c10">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 2.
            </param>
        </member>
        <member name="M:OpenGL.Matrix2x3d.#ctor(System.Double[])">
            <summary>
            Construct a Matrix2x3d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x3d.#ctor(System.Double[],System.UInt32)">
            <summary>
            Construct a Matrix2x3d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x3d.#ctor(OpenGL.Matrix2x3d)">
            <summary>
            Construct a Matrix2x3d specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix2x3d to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix2x3d._M00">
            <summary>
            Matrix2x3d component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3d._M01">
            <summary>
            Matrix2x3d component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3d._M02">
            <summary>
            Matrix2x3d component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3d._M10">
            <summary>
            Matrix2x3d component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3d._M11">
            <summary>
            Matrix2x3d component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3d._M12">
            <summary>
            Matrix2x3d component: column 2, row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3d.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3d.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3d.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3d.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3d.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x3d.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 2 column count, or if <paramref name="r"/>
            is greater than 3 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x3d.op_Multiply(OpenGL.Matrix2x3d,System.Double)">
            <summary>
            Multiply a Matrix2x3d with a double.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix2x3d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x3d"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3d.op_Equality(OpenGL.Matrix2x3d,OpenGL.Matrix2x3d)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x3d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x3d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3d.op_Inequality(OpenGL.Matrix2x3d,OpenGL.Matrix2x3d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x3d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x3d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3d.op_Explicit(OpenGL.Matrix2x3d)~System.Double[]">
            <summary>
            Operator casting to double[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x3d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3d.op_Explicit(OpenGL.Matrix2x3d)~OpenGL.Matrix2x3f">
            <summary>
            Operator casting to Matrix2x3f.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x3d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x3f"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix2x3d.Transposed">
            <summary>
            Compute the transpose of this Matrix2x3d.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x3d.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x3d.Equals(OpenGL.Matrix2x3d,System.Double)">
            <summary>
            Indicates whether the this Matrix2x3d is equal to another Matrix2x3d, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x3d"/> to compare with this Matrix2x3d.
            </param>
            <param name="precision">
            The <see cref="T:System.Double"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix2x3d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3d.Equals(OpenGL.Matrix2x3d)">
            <summary>
            Indicates whether the this Matrix2x3d is equal to another Matrix2x3d.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x3d"/> to compare with this Matrix2x3d.
            </param>
            <returns>
            It returns true if the this Matrix2x3d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x3d.ToString">
            <summary>
            Stringify this Matrix2x3d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix2x3d.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix2x4d">
            <summary>
            Matrix composed by 2 columns and 4 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x4d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix2x4d specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c03">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 3.
            </param>
            <param name="c10">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 2.
            </param>
            <param name="c13">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 3.
            </param>
        </member>
        <member name="M:OpenGL.Matrix2x4d.#ctor(System.Double[])">
            <summary>
            Construct a Matrix2x4d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x4d.#ctor(System.Double[],System.UInt32)">
            <summary>
            Construct a Matrix2x4d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x4d.#ctor(OpenGL.Matrix2x4d)">
            <summary>
            Construct a Matrix2x4d specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix2x4d to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix2x4d._M00">
            <summary>
            Matrix2x4d component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4d._M01">
            <summary>
            Matrix2x4d component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4d._M02">
            <summary>
            Matrix2x4d component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4d._M03">
            <summary>
            Matrix2x4d component: column 1, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4d._M10">
            <summary>
            Matrix2x4d component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4d._M11">
            <summary>
            Matrix2x4d component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4d._M12">
            <summary>
            Matrix2x4d component: column 2, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4d._M13">
            <summary>
            Matrix2x4d component: column 2, row 4.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4d.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4d.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4d.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4d.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4d.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4d.Row3">
            <summary>
            Get the row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix2x4d.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 2 column count, or if <paramref name="r"/>
            is greater than 4 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix2x4d.op_Multiply(OpenGL.Matrix2x4d,System.Double)">
            <summary>
            Multiply a Matrix2x4d with a double.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix2x4d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x4d"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4d.op_Equality(OpenGL.Matrix2x4d,OpenGL.Matrix2x4d)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x4d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x4d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4d.op_Inequality(OpenGL.Matrix2x4d,OpenGL.Matrix2x4d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix2x4d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix2x4d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4d.op_Explicit(OpenGL.Matrix2x4d)~System.Double[]">
            <summary>
            Operator casting to double[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x4d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4d.op_Explicit(OpenGL.Matrix2x4d)~OpenGL.Matrix2x4f">
            <summary>
            Operator casting to Matrix2x4f.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix2x4d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix2x4f"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix2x4d.Transposed">
            <summary>
            Compute the transpose of this Matrix2x4d.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix2x4d.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix2x4d.Equals(OpenGL.Matrix2x4d,System.Double)">
            <summary>
            Indicates whether the this Matrix2x4d is equal to another Matrix2x4d, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x4d"/> to compare with this Matrix2x4d.
            </param>
            <param name="precision">
            The <see cref="T:System.Double"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix2x4d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4d.Equals(OpenGL.Matrix2x4d)">
            <summary>
            Indicates whether the this Matrix2x4d is equal to another Matrix2x4d.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix2x4d"/> to compare with this Matrix2x4d.
            </param>
            <returns>
            It returns true if the this Matrix2x4d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix2x4d.ToString">
            <summary>
            Stringify this Matrix2x4d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix2x4d.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix3x2d">
            <summary>
            Matrix composed by 3 columns and 2 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x2d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix3x2d specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c10">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c20">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 1.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x2d.#ctor(System.Double[])">
            <summary>
            Construct a Matrix3x2d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x2d.#ctor(System.Double[],System.UInt32)">
            <summary>
            Construct a Matrix3x2d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x2d.#ctor(OpenGL.Matrix3x2d)">
            <summary>
            Construct a Matrix3x2d specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix3x2d to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix3x2d._M00">
            <summary>
            Matrix3x2d component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2d._M01">
            <summary>
            Matrix3x2d component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2d._M10">
            <summary>
            Matrix3x2d component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2d._M11">
            <summary>
            Matrix3x2d component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2d._M20">
            <summary>
            Matrix3x2d component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2d._M21">
            <summary>
            Matrix3x2d component: column 3, row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2d.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2d.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2d.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2d.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2d.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x2d.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 3 column count, or if <paramref name="r"/>
            is greater than 2 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x2d.op_Multiply(OpenGL.Matrix3x2d,System.Double)">
            <summary>
            Multiply a Matrix3x2d with a double.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x2d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x2d"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2d.op_Equality(OpenGL.Matrix3x2d,OpenGL.Matrix3x2d)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x2d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x2d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2d.op_Inequality(OpenGL.Matrix3x2d,OpenGL.Matrix3x2d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x2d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x2d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2d.op_Explicit(OpenGL.Matrix3x2d)~System.Double[]">
            <summary>
            Operator casting to double[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x2d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2d.op_Explicit(OpenGL.Matrix3x2d)~OpenGL.Matrix3x2f">
            <summary>
            Operator casting to Matrix3x2f.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x2d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x2f"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix3x2d.Transposed">
            <summary>
            Compute the transpose of this Matrix3x2d.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x2d.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x2d.Equals(OpenGL.Matrix3x2d,System.Double)">
            <summary>
            Indicates whether the this Matrix3x2d is equal to another Matrix3x2d, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x2d"/> to compare with this Matrix3x2d.
            </param>
            <param name="precision">
            The <see cref="T:System.Double"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix3x2d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2d.Equals(OpenGL.Matrix3x2d)">
            <summary>
            Indicates whether the this Matrix3x2d is equal to another Matrix3x2d.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x2d"/> to compare with this Matrix3x2d.
            </param>
            <returns>
            It returns true if the this Matrix3x2d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x2d.ToString">
            <summary>
            Stringify this Matrix3x2d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix3x2d.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix3x3d">
            <summary>
            Matrix composed by 3 columns and 3 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix3x3d specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c10">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 2.
            </param>
            <param name="c20">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 1.
            </param>
            <param name="c22">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 2.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x3d.#ctor(System.Double[])">
            <summary>
            Construct a Matrix3x3d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x3d.#ctor(System.Double[],System.UInt32)">
            <summary>
            Construct a Matrix3x3d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x3d.#ctor(OpenGL.Matrix3x3d)">
            <summary>
            Construct a Matrix3x3d specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix3x3d to be copied into this instance.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x3d.#ctor(OpenGL.Matrix4x4d,System.UInt32,System.UInt32)">
            <summary>
            Construct the complement matrix of a Matrix4x4d.
            </summary>
            <param name="other">
            The Matrix4x4d to be copied into this instance.
            </param>
            <param name="c">
            The index of column to be excluded to construct the complement matrix.
            </param>
            <param name="r">
            The index of row to be excluded to construct the complement matrix.
            </param>
        </member>
        <member name="F:OpenGL.Matrix3x3d._M00">
            <summary>
            Matrix3x3d component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3d._M01">
            <summary>
            Matrix3x3d component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3d._M02">
            <summary>
            Matrix3x3d component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3d._M10">
            <summary>
            Matrix3x3d component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3d._M11">
            <summary>
            Matrix3x3d component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3d._M12">
            <summary>
            Matrix3x3d component: column 2, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3d._M20">
            <summary>
            Matrix3x3d component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3d._M21">
            <summary>
            Matrix3x3d component: column 3, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3d._M22">
            <summary>
            Matrix3x3d component: column 3, row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3d.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3d.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3d.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3d.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3d.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3d.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3d.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 3 column count, or if <paramref name="r"/>
            is greater than 3 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x3d.op_Multiply(OpenGL.Matrix3x3d,System.Double)">
            <summary>
            Multiply a Matrix3x3d with a double.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3d"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.op_Multiply(OpenGL.Matrix3x3d,OpenGL.Vertex3d)">
            <summary>
            Multiply a Matrix3x3d with a Vertex3d.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> resulting from the product of the matrix <paramref name="m"/> and the vertex <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.op_Multiply(OpenGL.Matrix3x3d,OpenGL.Matrix3x3d)">
            <summary>
            Multiply two Matrix3x3d.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x3d"/> that specify the left multiplication operand.
            </param>
            <param name="n">
            A <see cref="T:OpenGL.Matrix3x3d"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3d"/> resulting from the product of the matrix <paramref name="m"/> and the matrix <paramref name="n"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.op_Equality(OpenGL.Matrix3x3d,OpenGL.Matrix3x3d)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x3d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x3d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.op_Inequality(OpenGL.Matrix3x3d,OpenGL.Matrix3x3d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x3d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x3d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.op_Explicit(OpenGL.Matrix3x3d)~System.Double[]">
            <summary>
            Operator casting to double[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x3d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.op_Explicit(OpenGL.Matrix3x3d)~OpenGL.Matrix3x3f">
            <summary>
            Operator casting to Matrix3x3f.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x3d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3f"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.RotatedX(System.Double)">
            <summary>
            Construct a Matrix3x3d modelling a rotation around the X axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3d"/> representing a matrix rotating on X axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.RotateX(System.Double)">
            <summary>
            Rotates this Matrix3x3d around the X axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x3d.RotatedY(System.Double)">
            <summary>
            Construct a Matrix3x3d modelling a rotation around the Y axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3d"/> representing a matrix rotating on Y axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.RotateY(System.Double)">
            <summary>
            Rotates this Matrix3x3d around the Y axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x3d.RotatedZ(System.Double)">
            <summary>
            Construct a Matrix3x3d modelling a rotation around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3d"/> representing a matrix rotating on Z axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.RotateZ(System.Double)">
            <summary>
            Rotates this Matrix3x3d around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x3d.Scaled(System.Double,System.Double,System.Double)">
            <summary>
            Compute the scaled of this Matrix3x3d.
            </summary>
            <param name="x">
            A <see cref="T:System.Double"/> that specifies the scale on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> that specifies the scale on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> that specifies the scale on Z axis.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x3d"/> representing a scaling matrix.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scale this Matrix3x3d.
            </summary>
            <param name="x">
            A <see cref="T:System.Double"/> that specifies the scale on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> that specifies the scale on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> that specifies the scale on Z axis.
            </param>
        </member>
        <member name="P:OpenGL.Matrix3x3d.Transposed">
            <summary>
            Compute the transpose of this Matrix3x3d.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x3d.Transpose">
            <summary>
            Transpose this Matrix3x3d.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3d.Determinant">
            <summary>
            Compute the determinant of this Matrix3x3d.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x3d.Inverse">
            <summary>
            Compute the inverse of this Matrix3x3d.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x3d.Invert">
            <summary>
            Invert this Matrix3x3d.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3d.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x3d.Identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x3d.Equals(OpenGL.Matrix3x3d,System.Double)">
            <summary>
            Indicates whether the this Matrix3x3d is equal to another Matrix3x3d, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x3d"/> to compare with this Matrix3x3d.
            </param>
            <param name="precision">
            The <see cref="T:System.Double"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix3x3d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.Equals(OpenGL.Matrix3x3d)">
            <summary>
            Indicates whether the this Matrix3x3d is equal to another Matrix3x3d.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x3d"/> to compare with this Matrix3x3d.
            </param>
            <returns>
            It returns true if the this Matrix3x3d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x3d.ToString">
            <summary>
            Stringify this Matrix3x3d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix3x3d.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix3x4d">
            <summary>
            Matrix composed by 3 columns and 4 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x4d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix3x4d specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c03">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 3.
            </param>
            <param name="c10">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 2.
            </param>
            <param name="c13">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 3.
            </param>
            <param name="c20">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 1.
            </param>
            <param name="c22">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 2.
            </param>
            <param name="c23">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 3.
            </param>
        </member>
        <member name="M:OpenGL.Matrix3x4d.#ctor(System.Double[])">
            <summary>
            Construct a Matrix3x4d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x4d.#ctor(System.Double[],System.UInt32)">
            <summary>
            Construct a Matrix3x4d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x4d.#ctor(OpenGL.Matrix3x4d)">
            <summary>
            Construct a Matrix3x4d specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix3x4d to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M00">
            <summary>
            Matrix3x4d component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M01">
            <summary>
            Matrix3x4d component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M02">
            <summary>
            Matrix3x4d component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M03">
            <summary>
            Matrix3x4d component: column 1, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M10">
            <summary>
            Matrix3x4d component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M11">
            <summary>
            Matrix3x4d component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M12">
            <summary>
            Matrix3x4d component: column 2, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M13">
            <summary>
            Matrix3x4d component: column 2, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M20">
            <summary>
            Matrix3x4d component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M21">
            <summary>
            Matrix3x4d component: column 3, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M22">
            <summary>
            Matrix3x4d component: column 3, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d._M23">
            <summary>
            Matrix3x4d component: column 3, row 4.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4d.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4d.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4d.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4d.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4d.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4d.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4d.Row3">
            <summary>
            Get the row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix3x4d.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 3 column count, or if <paramref name="r"/>
            is greater than 4 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix3x4d.op_Multiply(OpenGL.Matrix3x4d,System.Double)">
            <summary>
            Multiply a Matrix3x4d with a double.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix3x4d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x4d"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4d.op_Equality(OpenGL.Matrix3x4d,OpenGL.Matrix3x4d)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x4d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x4d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4d.op_Inequality(OpenGL.Matrix3x4d,OpenGL.Matrix3x4d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix3x4d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix3x4d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4d.op_Explicit(OpenGL.Matrix3x4d)~System.Double[]">
            <summary>
            Operator casting to double[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x4d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4d.op_Explicit(OpenGL.Matrix3x4d)~OpenGL.Matrix3x4f">
            <summary>
            Operator casting to Matrix3x4f.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix3x4d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix3x4f"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix3x4d.Transposed">
            <summary>
            Compute the transpose of this Matrix3x4d.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix3x4d.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix3x4d.Equals(OpenGL.Matrix3x4d,System.Double)">
            <summary>
            Indicates whether the this Matrix3x4d is equal to another Matrix3x4d, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x4d"/> to compare with this Matrix3x4d.
            </param>
            <param name="precision">
            The <see cref="T:System.Double"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix3x4d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4d.Equals(OpenGL.Matrix3x4d)">
            <summary>
            Indicates whether the this Matrix3x4d is equal to another Matrix3x4d.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix3x4d"/> to compare with this Matrix3x4d.
            </param>
            <returns>
            It returns true if the this Matrix3x4d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix3x4d.ToString">
            <summary>
            Stringify this Matrix3x4d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix3x4d.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix4x2d">
            <summary>
            Matrix composed by 4 columns and 2 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x2d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix4x2d specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c10">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c20">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 1.
            </param>
            <param name="c30">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 3 and row 0.
            </param>
            <param name="c31">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 3 and row 1.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x2d.#ctor(System.Double[])">
            <summary>
            Construct a Matrix4x2d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x2d.#ctor(System.Double[],System.UInt32)">
            <summary>
            Construct a Matrix4x2d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x2d.#ctor(OpenGL.Matrix4x2d)">
            <summary>
            Construct a Matrix4x2d specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix4x2d to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix4x2d._M00">
            <summary>
            Matrix4x2d component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2d._M01">
            <summary>
            Matrix4x2d component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2d._M10">
            <summary>
            Matrix4x2d component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2d._M11">
            <summary>
            Matrix4x2d component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2d._M20">
            <summary>
            Matrix4x2d component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2d._M21">
            <summary>
            Matrix4x2d component: column 3, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2d._M30">
            <summary>
            Matrix4x2d component: column 4, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2d._M31">
            <summary>
            Matrix4x2d component: column 4, row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2d.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2d.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2d.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2d.Column3">
            <summary>
            Get the column 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2d.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2d.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x2d.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 4 column count, or if <paramref name="r"/>
            is greater than 2 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x2d.op_Multiply(OpenGL.Matrix4x2d,System.Double)">
            <summary>
            Multiply a Matrix4x2d with a double.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x2d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x2d"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2d.op_Equality(OpenGL.Matrix4x2d,OpenGL.Matrix4x2d)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x2d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x2d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2d.op_Inequality(OpenGL.Matrix4x2d,OpenGL.Matrix4x2d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x2d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x2d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2d.op_Explicit(OpenGL.Matrix4x2d)~System.Double[]">
            <summary>
            Operator casting to double[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x2d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2d.op_Explicit(OpenGL.Matrix4x2d)~OpenGL.Matrix4x2f">
            <summary>
            Operator casting to Matrix4x2f.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x2d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x2f"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix4x2d.Transposed">
            <summary>
            Compute the transpose of this Matrix4x2d.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x2d.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x2d.Equals(OpenGL.Matrix4x2d,System.Double)">
            <summary>
            Indicates whether the this Matrix4x2d is equal to another Matrix4x2d, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x2d"/> to compare with this Matrix4x2d.
            </param>
            <param name="precision">
            The <see cref="T:System.Double"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix4x2d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2d.Equals(OpenGL.Matrix4x2d)">
            <summary>
            Indicates whether the this Matrix4x2d is equal to another Matrix4x2d.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x2d"/> to compare with this Matrix4x2d.
            </param>
            <returns>
            It returns true if the this Matrix4x2d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x2d.ToString">
            <summary>
            Stringify this Matrix4x2d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix4x2d.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix4x3d">
            <summary>
            Matrix composed by 4 columns and 3 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix4x3d specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c10">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 2.
            </param>
            <param name="c20">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 1.
            </param>
            <param name="c22">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 2.
            </param>
            <param name="c30">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 3 and row 0.
            </param>
            <param name="c31">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 3 and row 1.
            </param>
            <param name="c32">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 3 and row 2.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x3d.#ctor(System.Double[])">
            <summary>
            Construct a Matrix4x3d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x3d.#ctor(System.Double[],System.UInt32)">
            <summary>
            Construct a Matrix4x3d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x3d.#ctor(OpenGL.Matrix4x3d)">
            <summary>
            Construct a Matrix4x3d specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix4x3d to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M00">
            <summary>
            Matrix4x3d component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M01">
            <summary>
            Matrix4x3d component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M02">
            <summary>
            Matrix4x3d component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M10">
            <summary>
            Matrix4x3d component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M11">
            <summary>
            Matrix4x3d component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M12">
            <summary>
            Matrix4x3d component: column 2, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M20">
            <summary>
            Matrix4x3d component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M21">
            <summary>
            Matrix4x3d component: column 3, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M22">
            <summary>
            Matrix4x3d component: column 3, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M30">
            <summary>
            Matrix4x3d component: column 4, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M31">
            <summary>
            Matrix4x3d component: column 4, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d._M32">
            <summary>
            Matrix4x3d component: column 4, row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3d.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3d.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3d.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3d.Column3">
            <summary>
            Get the column 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3d.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3d.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3d.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x3d.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 4 column count, or if <paramref name="r"/>
            is greater than 3 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x3d.op_Multiply(OpenGL.Matrix4x3d,System.Double)">
            <summary>
            Multiply a Matrix4x3d with a double.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x3d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x3d"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3d.op_Equality(OpenGL.Matrix4x3d,OpenGL.Matrix4x3d)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x3d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x3d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3d.op_Inequality(OpenGL.Matrix4x3d,OpenGL.Matrix4x3d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x3d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x3d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3d.op_Explicit(OpenGL.Matrix4x3d)~System.Double[]">
            <summary>
            Operator casting to double[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x3d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3d.op_Explicit(OpenGL.Matrix4x3d)~OpenGL.Matrix4x3f">
            <summary>
            Operator casting to Matrix4x3f.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x3d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x3f"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="P:OpenGL.Matrix4x3d.Transposed">
            <summary>
            Compute the transpose of this Matrix4x3d.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x3d.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x3d.Equals(OpenGL.Matrix4x3d,System.Double)">
            <summary>
            Indicates whether the this Matrix4x3d is equal to another Matrix4x3d, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x3d"/> to compare with this Matrix4x3d.
            </param>
            <param name="precision">
            The <see cref="T:System.Double"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix4x3d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3d.Equals(OpenGL.Matrix4x3d)">
            <summary>
            Indicates whether the this Matrix4x3d is equal to another Matrix4x3d.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x3d"/> to compare with this Matrix4x3d.
            </param>
            <returns>
            It returns true if the this Matrix4x3d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x3d.ToString">
            <summary>
            Stringify this Matrix4x3d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix4x3d.
            </returns>
        </member>
        <member name="T:OpenGL.Matrix4x4d">
            <summary>
            Matrix composed by 4 columns and 4 rows.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x4d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix4x4d specifying the matrix components.
            </summary>
            <param name="c00">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 0.
            </param>
            <param name="c01">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 1.
            </param>
            <param name="c02">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 2.
            </param>
            <param name="c03">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 0 and row 3.
            </param>
            <param name="c10">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 0.
            </param>
            <param name="c11">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 1.
            </param>
            <param name="c12">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 2.
            </param>
            <param name="c13">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 1 and row 3.
            </param>
            <param name="c20">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 0.
            </param>
            <param name="c21">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 1.
            </param>
            <param name="c22">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 2.
            </param>
            <param name="c23">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 2 and row 3.
            </param>
            <param name="c30">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 3 and row 0.
            </param>
            <param name="c31">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 3 and row 1.
            </param>
            <param name="c32">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 3 and row 2.
            </param>
            <param name="c33">
            A <see cref="T:System.Double" /> that specifies the matrix component at column 3 and row 3.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x4d.#ctor(System.Double[])">
            <summary>
            Construct a Matrix4x4d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4d.#ctor(System.Double[],System.UInt32)">
            <summary>
            Construct a Matrix4x4d specifying the matrix components.
            </summary>
            <param name="c">
            An array holding the matrix components.
            </param>
            <param name="offset">
            A <see cref="T:System.UInt32" /> that specifies the index of the first matrix component.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="c"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="c"/> is does not contains enought elements.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4d.#ctor(OpenGL.Matrix4x4d)">
            <summary>
            Construct a Matrix4x4d specifying another matrix.
            </summary>
            <param name="other">
            The other Matrix4x4d to be copied into this instance.
            </param>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M00">
            <summary>
            Matrix4x4d component: column 1, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M01">
            <summary>
            Matrix4x4d component: column 1, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M02">
            <summary>
            Matrix4x4d component: column 1, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M03">
            <summary>
            Matrix4x4d component: column 1, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M10">
            <summary>
            Matrix4x4d component: column 2, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M11">
            <summary>
            Matrix4x4d component: column 2, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M12">
            <summary>
            Matrix4x4d component: column 2, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M13">
            <summary>
            Matrix4x4d component: column 2, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M20">
            <summary>
            Matrix4x4d component: column 3, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M21">
            <summary>
            Matrix4x4d component: column 3, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M22">
            <summary>
            Matrix4x4d component: column 3, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M23">
            <summary>
            Matrix4x4d component: column 3, row 4.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M30">
            <summary>
            Matrix4x4d component: column 4, row 1.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M31">
            <summary>
            Matrix4x4d component: column 4, row 2.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M32">
            <summary>
            Matrix4x4d component: column 4, row 3.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d._M33">
            <summary>
            Matrix4x4d component: column 4, row 4.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Column0">
            <summary>
            Get the column 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Column1">
            <summary>
            Get the column 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Column2">
            <summary>
            Get the column 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Column3">
            <summary>
            Get the column 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Row0">
            <summary>
            Get the row 0.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Row1">
            <summary>
            Get the row 1.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Row2">
            <summary>
            Get the row 2.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Row3">
            <summary>
            Get the row 3.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Item(System.UInt32,System.UInt32)">
            <summary>
            Matrix component indexer.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32"/> the specify the column index (zero based).
            </param>
            <param name="r">
            A <see cref="T:System.Int32"/> the specify the row index (zero based).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception throw if <paramref name="c"/> is greater than 4 column count, or if <paramref name="r"/>
            is greater than 4 row count.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4d.op_Multiply(OpenGL.Matrix4x4d,System.Double)">
            <summary>
            Multiply a Matrix4x4d with a double.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:System.Double"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4d"/> resulting from the product of the matrix <paramref name="m"/> and the scalar <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.op_Multiply(OpenGL.Matrix4x4d,OpenGL.Vertex4d)">
            <summary>
            Multiply a Matrix4x4d with a Vertex4d.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4d"/> that specify the left multiplication operand.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> resulting from the product of the matrix <paramref name="m"/> and the vertex <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.op_Multiply(OpenGL.Matrix4x4d,OpenGL.Matrix4x4d)">
            <summary>
            Multiply two Matrix4x4d.
            </summary>
            <param name="m">
            A <see cref="T:OpenGL.Matrix4x4d"/> that specify the left multiplication operand.
            </param>
            <param name="n">
            A <see cref="T:OpenGL.Matrix4x4d"/> that specify the right multiplication operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4d"/> resulting from the product of the matrix <paramref name="m"/> and the matrix <paramref name="n"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.op_Equality(OpenGL.Matrix4x4d,OpenGL.Matrix4x4d)">
            <summary>
            Equality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x4d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x4d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.op_Inequality(OpenGL.Matrix4x4d,OpenGL.Matrix4x4d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="m1">
            A <see cref="T:OpenGL.Matrix4x4d"/> that specify the left operand.
            </param>
            <param name="m2">
            A <see cref="T:OpenGL.Matrix4x4d"/> that specify the left operand.
            </param>
            <returns>
            It returns true if <paramref name="m1"/> not equals <paramref name="m2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.op_Explicit(OpenGL.Matrix4x4d)~System.Double[]">
            <summary>
            Operator casting to double[] .
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x4d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.op_Explicit(OpenGL.Matrix4x4d)~OpenGL.Matrix4x4f">
            <summary>
            Operator casting to Matrix4x4f.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Matrix4x4d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4f"/> initialized with the matrix components.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Ortho(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix4x4d modelling an orthographic projection.
            </summary>
            <param name="left">
            A <see cref="T:System.Double"/> indicating the distance of the left plane, in world units.
            </param>
            <param name="right">
            A <see cref="T:System.Double"/> indicating the distance of the right plane, in world units
            </param>
            <param name="bottom">
            A <see cref="T:System.Double"/> indicating the distance of the bottom plane, in world units
            </param>
            <param name="top">
            A <see cref="T:System.Double"/> indicating the distance of the top plane, in world units
            </param>
            <param name="near">
            A <see cref="T:System.Double"/> indicating the distance of the near plane, in world units
            </param>
            <param name="far">
            A <see cref="T:System.Double"/> indicating the distance of the far plane, in world units
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4d"/> representing an orthographic projection matrix.
            </returns>
            <exception cref="T:System.ArgumentException">
            Exception thrown if the parameter have an invalid set of values.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Ortho2D(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix4x4d modelling a 2D orthographic projection.
            </summary>
            <param name="left">
            A <see cref="T:System.Double"/> indicating the distance of the left plane, in world units.
            </param>
            <param name="right">
            A <see cref="T:System.Double"/> indicating the distance of the right plane, in world units
            </param>
            <param name="bottom">
            A <see cref="T:System.Double"/> indicating the distance of the bottom plane, in world units
            </param>
            <param name="top">
            A <see cref="T:System.Double"/> indicating the distance of the top plane, in world units
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4d"/> representing a 2D orthographic projection matrix.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Frustrum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix4x4d modelling a frustrum perspective projection matrix.
            </summary>
            <param name="left">
            A <see cref="T:System.Double"/> that specifies the frustum left plane distance.
            </param>
            <param name="right">
            A <see cref="T:System.Double"/> that specifies the frustum right plane distance.
            </param>
            <param name="bottom">
            A <see cref="T:System.Double"/> that specifies the frustum bottom plane distance.
            </param>
            <param name="top">
            A <see cref="T:System.Double"/> that specifies the frustum top plane distance.
            </param>
            <param name="near">
            A <see cref="T:System.Double"/> that specifies the frustum near plane distance.
            </param>
            <param name="far">
            A <see cref="T:System.Double"/> that specifies the frustum far plane distance.
            </param>
            <exception cref="T:System.ArgumentException">
            Exception thrown if the parameter have an invalid set of values.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Perspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix4x4d modelling a frustrum perspective projection matrix, using FOV angle.
            </summary>
            <param name="fovy">
            A <see cref="T:System.Double"/> that specifies the vertical Field Of View angle, in degrees.
            </param>
            <param name="aspectRatio">
            A <see cref="T:System.Double"/> that specifies the view aspect ratio (i.e. the width / height ratio).
            </param>
            <param name="near">
            A <see cref="T:System.Double"/> that specifies the distance of the frustum near plane.
            </param>
            <param name="far">
            A <see cref="T:System.Double"/> that specifies the distance of the frustum far plane.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception thrown if at least one parameter has an invalid value.
            </exception>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Perspective(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix4x4d modelling an asymmetric frustrum perspective projection matrix, using FOV angles.
            </summary>
            <param name="leftFov">
            A <see cref="T:System.Double"/> that specifies the left plane FOV angle, in degrees.
            </param>
            <param name="rightFov">
            A <see cref="T:System.Double"/> that specifies the right plane FOV angle, in degrees.
            </param>
            <param name="bottomFov">
            A <see cref="T:System.Double"/> that specifies the bottom plane FOV angle, in degrees.
            </param>
            <param name="topFov">
            A <see cref="T:System.Double"/> that specifies the top plane FOV angle, in degrees.
            </param>
            <param name="near">
            A <see cref="T:System.Double"/> that specifies the distance of the frustum near plane.
            </param>
            <param name="far">
            A <see cref="T:System.Double"/> that specifies the distance of the frustum far plane.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Exception thrown if at least one parameter has an invalid value.
            </exception>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Position">
            <summary>
            Get the translation of this Matrix4x4d.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.ForwardVector">
            <summary>
            Get the forward vector of this Matrix4x4d.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.RightVector">
            <summary>
            Get the right vector of this Matrix4x4d.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.UpVector">
            <summary>
            Get the up vector of this Matrix4x4d.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x4d.LookAt(OpenGL.Vertex3d,OpenGL.Vertex3d,OpenGL.Vertex3d)">
            <summary>
            Construct a Matrix4x4d modelling a view transformation.
            </summary>
            <param name="eyePosition">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the eye position, in local coordinates.
            </param>
            <param name="targetPosition">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the eye target position, in local coordinates.
            </param>
            <param name="upVector">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the up vector of the view camera abstraction.
            </param>
            <returns>
            It returns a view transformation matrix used to transform the world coordinate, in order to view
            the world from <paramref name="eyePosition"/>, looking at <paramref name="targetPosition"/> having
            an up direction equal to <paramref name="upVector"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.LookAtDirection(OpenGL.Vertex3d,OpenGL.Vertex3d,OpenGL.Vertex3d)">
            <summary>
            Construct a Matrix4x4d modelling a view transformation.
            </summary>
            <param name="eyePosition">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the eye position, in local coordinates.
            </param>
            <param name="forwardVector">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the direction of the view. It will be normalized.
            </param>
            <param name="upVector">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the up vector of the view camera abstraction. It will be normalized
            </param>
            <returns>
            It returns a view transformation matrix used to transform the world coordinate, in order to view
            the world from <paramref name="eyePosition"/>, looking at <paramref name="forwardVector"/> having
            an up direction equal to <paramref name="upVector"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Translated(System.Double,System.Double,System.Double)">
            <summary>
            Construct a Matrix4x4d modelling a translation.
            </summary>
            <param name="x">
            A <see cref="T:System.Double"/> that specifies the translation on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> that specifies the translation on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> that specifies the translation on Z axis.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4d"/> representing a translation matrix.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Translates this Matrix4x4d.
            </summary>
            <param name="x">
            A <see cref="T:System.Double"/> that specifies the translation on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> that specifies the translation on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> that specifies the translation on Z axis.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x4d.RotatedX(System.Double)">
            <summary>
            Construct a Matrix4x4d modelling a rotation around the X axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4d"/> representing a matrix rotating on X axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.RotateX(System.Double)">
            <summary>
            Rotates this Matrix4x4d around the X axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x4d.RotatedY(System.Double)">
            <summary>
            Construct a Matrix4x4d modelling a rotation around the Y axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4d"/> representing a matrix rotating on Y axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.RotateY(System.Double)">
            <summary>
            Rotates this Matrix4x4d around the Y axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x4d.RotatedZ(System.Double)">
            <summary>
            Construct a Matrix4x4d modelling a rotation around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4d"/> representing a matrix rotating on Z axis.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.RotateZ(System.Double)">
            <summary>
            Rotates this Matrix4x4d around the Z axis.
            </summary>
            <param name="angle">
            A <see cref="T:System.Double"/> that specifies the rotation angle, in degrees.
            </param>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Scaled(System.Double,System.Double,System.Double)">
            <summary>
            Compute the scaled of this Matrix4x4d.
            </summary>
            <param name="x">
            A <see cref="T:System.Double"/> that specifies the scale on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> that specifies the scale on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> that specifies the scale on Z axis.
            </param>
            <returns>
            A <see cref="T:OpenGL.Matrix4x4d"/> representing a scaling matrix.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scale this Matrix4x4d.
            </summary>
            <param name="x">
            A <see cref="T:System.Double"/> that specifies the scale on X axis.
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> that specifies the scale on Y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> that specifies the scale on Z axis.
            </param>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Transposed">
            <summary>
            Compute the transpose of this Matrix4x4d.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Transpose">
            <summary>
            Transpose this Matrix4x4d.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Determinant">
            <summary>
            Compute the determinant of this Matrix4x4d.
            </summary>
        </member>
        <member name="P:OpenGL.Matrix4x4d.Inverse">
            <summary>
            Compute the inverse of this Matrix4x4d.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Invert">
            <summary>
            Invert this Matrix4x4d.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="F:OpenGL.Matrix4x4d.Identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Equals(OpenGL.Matrix4x4d,System.Double)">
            <summary>
            Indicates whether the this Matrix4x4d is equal to another Matrix4x4d, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x4d"/> to compare with this Matrix4x4d.
            </param>
            <param name="precision">
            The <see cref="T:System.Double"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Matrix4x4d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Equals(OpenGL.Matrix4x4d)">
            <summary>
            Indicates whether the this Matrix4x4d is equal to another Matrix4x4d.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Matrix4x4d"/> to compare with this Matrix4x4d.
            </param>
            <returns>
            It returns true if the this Matrix4x4d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Matrix4x4d.ToString">
            <summary>
            Stringify this Matrix4x4d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Matrix4x4d.
            </returns>
        </member>
        <member name="T:OpenGL.PixelLayout">
            <summary>
            Pixel format model.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.None">
            <summary>
            Unspecified pixel type.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.R8">
            <summary>
            Grayscale composed by 8 bits.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.R16">
            <summary>
            Grayscale composed by 16 bits.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.R32">
            <summary>
            Grayscale composed by 16 bits.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.GRAY16S">
            <summary>
            Grayscale composed by 16 bits.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RF">
            <summary>
            Grayscale composed by floating point number (32 bit IEEE floating point).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RD">
            <summary>
            Grayscale composed by floating point number (64 bit IEEE floating point).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RHF">
            <summary>
            Grayscale composed by half floating point number (16 bit IEEE floating point).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGB8">
            <summary>
            RGB composed by 8 bits (2/3 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGB15">
            <summary>
            RGB composed by 15 bits (5/6 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGB16">
            <summary>
            RGB composed by 16 bits (5/6 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGB24">
            <summary>
            RGB composed by 24 bits (8 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGB48">
            <summary>
            RGB composed by 48 bits (16 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGB96">
            <summary>
            RGB composed by 96 bits (32 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGBF">
            <summary>
            RGB composed by 3 single-precision floating-point.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGBHF">
            <summary>
            RGB composed by 3 half-precision floating-point.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGBD">
            <summary>
            RGB composed by 3 double-precision floating-point.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.SRGB24">
            <summary>
            sRGB composed by 24 bits (8 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.SBGR24">
            <summary>
            sBGR composed by 24 bits (8 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGBA32">
            <summary>
            RGBA composed by 32 bits (8 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGBA64">
            <summary>
            RGBA composed by 64 bits (16 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGBAF">
            <summary>
            RGBA composed by 4 (normalized) floating point numbers.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.RGBAHF">
            <summary>
            RGBA composed by 4 (normalized) half floating point numbers.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.BGR8">
            <summary>
            BGR composed by 8 bits (2/3 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.BGR15">
            <summary>
            BGR composed by 15 bits (5 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.BGR16">
            <summary>
            BGR composed by 16 bits (5/6 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.BGR24">
            <summary>
            BGR composed by 24 bits (8 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.BGR48">
            <summary>
            BGR composed by 48 bits (16 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.BGRF">
            <summary>
            BGR composed by 3 (normalized) floating point numbers.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.BGRHF">
            <summary>
            RGB composed by 3 (normalized) half floating point numbers.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.BGRA32">
            <summary>
            BGRA composed by 32 bits (8 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.BGRA64">
            <summary>
            BGRA composed by 64 bits (16 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.BGRAF">
            <summary>
            BGRA composed by 4 (normalized) floating point numbers.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.BGRAHF">
            <summary>
            BGRA composed by 4 (normalized) half floating point numbers.
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.YVU410">
             <summary>
             YVU 4:1:0 (9 bits).
             </summary>
             <remarks>
             The three components are separated into three sub-images or planes. The Y plane is first. The Y plane has one byte per pixel. For
             YVU410, the Cr plane immediately follows the Y plane in memory. The Cr plane is ¼ the width and ¼ the height of the Y plane (and of the
             image). Each Cr belongs to 16 pixels, a four-by-four square of the image. Following the Cr plane is the Cb plane, just like the
             Cr plane. YUV410 is the same, except the Cb plane comes first, then the Cr plane.
            
             If the Y plane has pad bytes after each row, then the Cr and Cb planes have ¼ as many pad bytes after their rows. In other words, four Cx
             rows (including padding) are exactly as long as one Y row (including padding).
             </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.YVU420">
             <summary>
             YVU 4:2:0 (12 bits).
             </summary>
             <remarks>
             These are planar formats, as opposed to a packed format. The three components are separated into three sub- images or planes. The Y plane
             is first. The Y plane has one byte per pixel. For YVU420, the Cr plane immediately follows the Y plane in memory. The Cr plane is half the
             width and half the height of the Y plane (and of the image). Each Cr belongs to four pixels, a two-by-two square of the image. For example,
             Cr0 belongs to Y'00, Y'01, Y'10, and Y'11. Following the Cr plane is the Cb plane, just like the Cr plane. YUV420 is the same except the Cb
             plane comes first, then the Cr plane.
            
             If the Y plane has pad bytes after each row, then the Cr and Cb planes have half as many pad bytes after their rows. In other words, two Cx
             rows (including padding) is exactly as long as one Y row (including padding).
             </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.YUYV">
            <summary>
            YVU 4:2:2 (16 bits).
            </summary>
            <remarks>
            In this format each four bytes is two pixels. Each four bytes is two Y's, a Cb and a Cr. Each Y goes to one of the pixels,
            and the Cb and Cr belong to both pixels. As you can see, the Cr and Cb components have half the horizontal resolution of the Y
            component. YUYV is known in the Windows environment as YUY2.
            </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.YYUV">
            <summary>
            YVU 4:2:2 (16 bits).
            </summary>
            <remarks>
            Variation of YUYV with different order of samples in memory
            </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.YVYU">
            <summary>
            YVU 4:2:2 (16 bits).
            </summary>
            <remarks>
            Variation of YUYV with different order of samples in memory
            </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.UYVY">
            <summary>
            YVU 4:2:2 (16 bits).
            </summary>
            <remarks>
            Variation of YUYV with different order of samples in memory
            </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.VYUY">
            <summary>
            YVU 4:2:2 (16 bits).
            </summary>
            <remarks>
            Variation of YUYV with different order of samples in memory
            </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.YUV422P">
             <summary>
             Planar YVU 4:2:2 (16 bits).
             </summary>
             <remarks>
             This format is not commonly used. This is a planar version of the YUYV format. The three components are separated
             into three sub-images or planes. The Y plane is first. The Y plane has one byte per pixel. The Cb plane immediately
             follows the Y plane in memory. The Cb plane is half the width of the Y plane (and of the image). Each Cb belongs to
             two pixels. For example, Cb0 belongs to Y'00, Y'01. Following the Cb plane is the Cr plane, just like the Cb plane.
            
             If the Y plane has pad bytes after each row, then the Cr and Cb planes have half as many pad bytes after their rows.
             In other words, two Cx rows (including padding) is exactly as long as one Y row (including padding).
             </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.YUV411P">
             <summary>
             Planar YVU 4:1:1 (16 bits).
             </summary>
             <remarks>
             This format is not commonly used. This is a planar format similar to the 4:2:2 planar format except with half as many
             chroma. The three components are separated into three sub-images or planes. The Y plane is first. The Y plane has one
             byte per pixel. The Cb plane immediately follows the Y plane in memory. The Cb plane is ¼ the width of the Y plane (and
             of the image). Each Cb belongs to 4 pixels all on the same row. For example, Cb0 belongs to Y'00, Y'01, Y'02 and Y'03. Following
             the Cb plane is the Cr plane, just like the Cb plane.
            
             If the Y plane has pad bytes after each row, then the Cr and Cb planes have ¼ as many pad bytes after their rows. In other
             words, four C x rows (including padding) is exactly as long as one Y row (including padding).
             </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.Y41P">
             <summary>
             YVU 4:1:1 (12 bits).
             </summary>
             <remarks>
             In this format each 12 bytes is eight pixels. In the twelve bytes are two CbCr pairs and eight Y's. The first CbCr
             pair goes with the first four Y's, and the second CbCr pair goes with the other four Y's. The Cb and Cr components have one
             fourth the horizontal resolution of the Y component.
            
             Do not confuse this format with YUV411P. Y41P is derived from "YUV 4:1:1 packed", while YUV411P stands for "YUV 4:1:1 planar".
            
             Example of 8 × 4 pixel image:
             start + 0:	Cb00	Y'00	Cr00	Y'01	Cb01	Y'02	Cr01	Y'03	Y'04	Y'05	Y'06	Y'07
             start + 12:	Cb10	Y'10	Cr10	Y'11	Cb11	Y'12	Cr11	Y'13	Y'14	Y'15	Y'16	Y'17
             start + 24:	Cb20	Y'20	Cr20	Y'21	Cb21	Y'22	Cr21	Y'23	Y'24	Y'25	Y'26	Y'27
             start + 36:	Cb30	Y'30	Cr30	Y'31	Cb31	Y'32	Cr31	Y'33	Y'34	Y'35	Y'36	Y'37
             </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.YUV444">
            <summary>
            YVU 4-4-4 (16 bits, xxxxyyyy uuuuvvvv).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.YUV555">
            <summary>
            YVU 5-5-5 (16 bits).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.YUV565">
            <summary>
            YVU 5-6-5 (16 bits).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.YUV32">
            <summary>
            YVU 8-8-8-8 (32 bits).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.YUV410">
             <summary>
             YVU 4:1:0 (9 bits).
             </summary>
             <remarks>
             The three components are separated into three sub-images or planes. The Y plane is first. The Y plane has one byte per pixel. For
             YUV410, the Cr plane immediately follows the Y plane in memory. The Cr plane is ¼ the width and ¼ the height of the Y plane (and of the
             image). Each Cr belongs to 16 pixels, a four-by-four square of the image. Following the Cr plane is the Cb plane, just like the
             Cr plane. YUV410 is the same, except the Cb plane comes first, then the Cr plane.
            
             If the Y plane has pad bytes after each row, then the Cr and Cb planes have ¼ as many pad bytes after their rows. In other words, four Cx
             rows (including padding) are exactly as long as one Y row (including padding).
             </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.YUV420">
             <summary>
             YVU 4:2:0 (12 bits).
             </summary>
             <remarks>
             These are planar formats, as opposed to a packed format. The three components are separated into three sub- images or planes. The Y plane
             is first. The Y plane has one byte per pixel. For YVU420, the Cr plane immediately follows the Y plane in memory. The Cr plane is half the
             width and half the height of the Y plane (and of the image). Each Cr belongs to four pixels, a two-by-two square of the image. For example,
             Cr0 belongs to Y'00, Y'01, Y'10, and Y'11. Following the Cr plane is the Cb plane, just like the Cr plane. YUV420 is the same except the Cb
             plane comes first, then the Cr plane.
            
             If the Y plane has pad bytes after each row, then the Cr and Cb planes have half as many pad bytes after their rows. In other words, two Cx
             rows (including padding) is exactly as long as one Y row (including padding).
             </remarks>
        </member>
        <member name="F:OpenGL.PixelLayout.HI240">
            <summary>
            8-bit color (8 bits).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.HM12">
            <summary>
            YUV 4:2:0 16x16 macroblocks (8 bits).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.M420">
            <summary>
            YUV 4:2:0 (12 bits, 2 lines Y, 1 line UV interleaved).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.CMY24">
            <summary>
            CMY composed by 24 bits (8 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.CMYK32">
            <summary>
            CMYK composed by 32 bits (8 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.CMYK64">
            <summary>
            CMYK composed by 64 bits (16 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.CMYKA40">
            <summary>
            CMYKA composed by 40 bits (8 bit per component).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.Depth16">
            <summary>
            Depth value (16 bit).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.Depth24">
            <summary>
            Depth value (24 bit).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.Depth32">
            <summary>
            Depth value (32 bit).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.DepthF">
            <summary>
            Depth value (single-precision floating-point).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.Depth24Stencil8">
            <summary>
            Combined depth/stencil value (24 bit for depth, 8 bit for stencil).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.Depth32FStencil8">
            <summary>
            Combined depth/stencil value (32 bit for depth, 8 bit for stencil).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.Integer1">
            <summary>
            Signed integer format (1 component 32 bit wide).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.Integer2">
            <summary>
            Signed integer format (2 component 32 bit wide).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.Integer3">
            <summary>
            Signed integer format (3 component 32 bit wide).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.Integer4">
            <summary>
            Signed integer format (4 component 32 bit wide).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.UInteger1">
            <summary>
            Unsigned integer format (1 component 32 bit wide).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.UInteger2">
            <summary>
            Unsigned integer format (2 component 32 bit wide).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.UInteger3">
            <summary>
            Unsigned integer format (3 component 32 bit wide).
            </summary>
        </member>
        <member name="F:OpenGL.PixelLayout.UInteger4">
            <summary>
            Unsigned integer format (4 component 32 bit wide).
            </summary>
        </member>
        <member name="T:OpenGL.PixelSpace">
            <summary>
            Pixel color space.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.Red">
            <summary>
            Grayscale.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.GrayAlpha">
            <summary>
            Gray scale and Alpha.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.RGB">
            <summary>
            RGB.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.sRGB">
            <summary>
            sRGB.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.sBGR">
            <summary>
            sBGR.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.RGBA">
            <summary>
            RGB and Alpha
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.BGR">
            <summary>
            Linear BGR.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.BGRA">
            <summary>
            BGR and Alpha.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.YUV">
            <summary>
            Luminance/chrominance.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.CMY">
            <summary>
            Cyan, Magenta and Yellow.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.CMYK">
            <summary>
            Cyan, Magenta, Yellow and Black.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.CMYKA">
            <summary>
            Cyan, Magenta, Yellow, Black and Alpha.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.Depth">
            <summary>
            Depth.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.DepthStencil">
            <summary>
            Combined depth/stencil.
            </summary>
        </member>
        <member name="F:OpenGL.PixelSpace.Integer">
            <summary>
            Integral integer texture.
            </summary>
        </member>
        <member name="T:OpenGL.Planef">
            <summary>
            Plane abstraction.
            </summary>
        </member>
        <member name="M:OpenGL.Planef.#ctor(OpenGL.Vertex3f,System.Single)">
            <summary>
            Construct a plane from a normal and a distance from origin.
            </summary>
            <param name="normal">
            A <see cref="T:OpenGL.Vertex3f"/> representing the plane normal.
            </param>
            <param name="d">
            A <see cref="T:System.Single"/> representing the distance between the plane and the origin.
            </param>
        </member>
        <member name="M:OpenGL.Planef.#ctor(OpenGL.Vertex3f,OpenGL.Vertex3f)">
            <summary>
            Construct a plane from a normal and a point.
            </summary>
            <param name="normal">
            A <see cref="T:OpenGL.Vertex3f"/> representing the plane normal.
            </param>
            <param name="point">
            A <see cref="T:OpenGL.Vertex3f"/> representing the point considered for constructing the plane.
            </param>
        </member>
        <member name="M:OpenGL.Planef.#ctor(OpenGL.Vertex3f,OpenGL.Vertex3f,OpenGL.Vertex3f)">
            <summary>
            Construct a plane from 3 coplanar points.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3f"/> representing one plane coplanar point.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3f"/> representing one plane coplanar point.
            </param>
            <param name="v3">
            A <see cref="T:OpenGL.Vertex3f"/> representing one plane coplanar point.
            </param>
        </member>
        <member name="F:OpenGL.Planef._A">
            <summary>
            1th plane component.
            </summary>
        </member>
        <member name="F:OpenGL.Planef._B">
            <summary>
            2th plane component.
            </summary>
        </member>
        <member name="F:OpenGL.Planef._C">
            <summary>
            3th plane component.
            </summary>
        </member>
        <member name="F:OpenGL.Planef._D">
            <summary>
            4th plane component (distance).
            </summary>
        </member>
        <member name="P:OpenGL.Planef.Normal">
            <summary>
            Plane normal vector.
            </summary>
        </member>
        <member name="P:OpenGL.Planef.Distance">
            <summary>
            Distance of plane from origin.
            </summary>
        </member>
        <member name="M:OpenGL.Planef.GetFrustumPlanes(OpenGL.Matrix4x4f)">
            <summary>
            Extract all six planes from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4f"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all six clipping planes defined
            by <paramref name="mvp"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Planef.GetFrustumLeftPlane(OpenGL.Matrix4x4f)">
            <summary>
            Extract the left plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4f"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planef"/> defining the left clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planef.GetFrustumRightPlane(OpenGL.Matrix4x4f)">
            <summary>
            Extract the right plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4f"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planef"/> defining the right clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planef.GetFrustumBottomPlane(OpenGL.Matrix4x4f)">
            <summary>
            Extract the bottom plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4f"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planef"/> defining the bottom clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planef.GetFrustumTopPlane(OpenGL.Matrix4x4f)">
            <summary>
            Extract the top plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4f"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planef"/> defining the top clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planef.GetFrustumNearPlane(OpenGL.Matrix4x4f)">
            <summary>
            Extract the near plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4f"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planef"/> defining the near clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planef.GetFrustumFarPlane(OpenGL.Matrix4x4f)">
            <summary>
            Extract the far plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4f"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planef"/> defining the far clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planef.NormalizePlane(OpenGL.Vertex4f)">
            <summary>
            Creates a normalized plane.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex4f"/> that specify the plane components.
            </param>
            <returns>
            It returns the normalized plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planef.NormalizePlane(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a normalized plane.
            </summary>
            <param name="a">
            A <see cref="T:System.Single"/> that specify the 1th plane component.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> that specify the 2th plane component.
            </param>
            <param name="c">
            A <see cref="T:System.Single"/> that specify the 3th plane component.
            </param>
            <param name="d">
            A <see cref="T:System.Single"/> that specify the 4th plane component.
            </param>
            <returns>
            It returns the normalized plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planef.GetDistance(OpenGL.Vertex3f)">
            <summary>
            Compute distance between a point and this plane.
            </summary>
            <param name="p">
            A <see cref="T:OpenGL.Vertex3f"/> representing a point.
            </param>
            <returns>
            It returns the distance between a point and this plane. In the case the distance is positive, the point is on the positive side of the
            plane (following Normal direction), otherwise the distance is negative.
            </returns>
        </member>
        <member name="T:OpenGL.Planed">
            <summary>
            Plane abstraction.
            </summary>
        </member>
        <member name="M:OpenGL.Planed.#ctor(OpenGL.Vertex3d,System.Double)">
            <summary>
            Construct a plane from a normal and a distance from origin.
            </summary>
            <param name="normal">
            A <see cref="T:OpenGL.Vertex3d"/> representing the plane normal.
            </param>
            <param name="d">
            A <see cref="T:System.Double"/> representing the distance between the plane and the origin.
            </param>
        </member>
        <member name="M:OpenGL.Planed.#ctor(OpenGL.Vertex3d,OpenGL.Vertex3d)">
            <summary>
            Construct a plane from a normal and a point.
            </summary>
            <param name="normal">
            A <see cref="T:OpenGL.Vertex3d"/> representing the plane normal.
            </param>
            <param name="point">
            A <see cref="T:OpenGL.Vertex3d"/> representing the point considered for constructing the plane.
            </param>
        </member>
        <member name="M:OpenGL.Planed.#ctor(OpenGL.Vertex3d,OpenGL.Vertex3d,OpenGL.Vertex3d)">
            <summary>
            Construct a plane from 3 coplanar points.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3d"/> representing one plane coplanar point.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3d"/> representing one plane coplanar point.
            </param>
            <param name="v3">
            A <see cref="T:OpenGL.Vertex3d"/> representing one plane coplanar point.
            </param>
        </member>
        <member name="F:OpenGL.Planed._A">
            <summary>
            1th plane component.
            </summary>
        </member>
        <member name="F:OpenGL.Planed._B">
            <summary>
            2th plane component.
            </summary>
        </member>
        <member name="F:OpenGL.Planed._C">
            <summary>
            3th plane component.
            </summary>
        </member>
        <member name="F:OpenGL.Planed._D">
            <summary>
            4th plane component (distance).
            </summary>
        </member>
        <member name="P:OpenGL.Planed.Normal">
            <summary>
            Plane normal vector.
            </summary>
        </member>
        <member name="P:OpenGL.Planed.Distance">
            <summary>
            Distance of plane from origin.
            </summary>
        </member>
        <member name="M:OpenGL.Planed.GetFrustumPlanes(OpenGL.Matrix4x4d)">
            <summary>
            Extract all six planes from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4d"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all six clipping planes defined
            by <paramref name="mvp"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Planed.GetFrustumLeftPlane(OpenGL.Matrix4x4d)">
            <summary>
            Extract the left plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4d"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planed"/> defining the left clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planed.GetFrustumRightPlane(OpenGL.Matrix4x4d)">
            <summary>
            Extract the right plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4d"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planed"/> defining the right clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planed.GetFrustumBottomPlane(OpenGL.Matrix4x4d)">
            <summary>
            Extract the bottom plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4d"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planed"/> defining the bottom clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planed.GetFrustumTopPlane(OpenGL.Matrix4x4d)">
            <summary>
            Extract the top plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4d"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planed"/> defining the top clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planed.GetFrustumNearPlane(OpenGL.Matrix4x4d)">
            <summary>
            Extract the near plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4d"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planed"/> defining the near clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planed.GetFrustumFarPlane(OpenGL.Matrix4x4d)">
            <summary>
            Extract the far plane from a model-view-projection matrix.
            </summary>
            <param name="mvp">
            The <see cref="T:OpenGL.Matrix4x4d"/> that specify the matrix used for drawing the clipped object.
            </param>
            <returns>
            It returns a <see cref="T:OpenGL.Planed"/> defining the far clipping plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planed.NormalizePlane(OpenGL.Vertex4d)">
            <summary>
            Creates a normalized plane.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the plane components.
            </param>
            <returns>
            It returns the normalized plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planed.NormalizePlane(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a normalized plane.
            </summary>
            <param name="a">
            A <see cref="T:System.Double"/> that specify the 1th plane component.
            </param>
            <param name="b">
            A <see cref="T:System.Double"/> that specify the 2th plane component.
            </param>
            <param name="c">
            A <see cref="T:System.Double"/> that specify the 3th plane component.
            </param>
            <param name="d">
            A <see cref="T:System.Double"/> that specify the 4th plane component.
            </param>
            <returns>
            It returns the normalized plane.
            </returns>
        </member>
        <member name="M:OpenGL.Planed.GetDistance(OpenGL.Vertex3d)">
            <summary>
            Compute distance between a point and this plane.
            </summary>
            <param name="p">
            A <see cref="T:OpenGL.Vertex3d"/> representing a point.
            </param>
            <returns>
            It returns the distance between a point and this plane. In the case the distance is positive, the point is on the positive side of the
            plane (following Normal direction), otherwise the distance is negative.
            </returns>
        </member>
        <member name="T:OpenGL.Quaternion">
            <summary>
            Quaternion.
            </summary>
            <remarks>
            <para>
            Quaternion are used to represents a rotation in a three-dimensional space.
            </para>
            <para>
            Theory links:
            - http://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation
            - http://en.wikipedia.org/wiki/Rotation_representation
            </para>
            </remarks>
        </member>
        <member name="M:OpenGL.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a Quaternion from quaternion components.
            </summary>
            <param name="q1">
            A <see cref="T:System.Double"/> that specify the quaternion component <i>q1</i>.
            </param>
            <param name="q2">
            A <see cref="T:System.Double"/> that specify the quaternion component <i>q2</i>.
            </param>
            <param name="q3">
            A <see cref="T:System.Double"/> that specify the quaternion component <i>q3</i>.
            </param>
            <param name="q4">
            A <see cref="T:System.Double"/> that specify the quaternion component <i>q4</i> (scalar component).
            </param>
        </member>
        <member name="M:OpenGL.Quaternion.#ctor(OpenGL.Vertex3f,System.Single)">
            <summary>
            Quaternion constructor from euler rotation axis and rotation angle.
            </summary>
            <param name="rVector">
            A <see cref="T:OpenGL.Vertex3d"/> representing the rotation axis.
            </param>
            <param name="rAngle">
            A <see cref="T:System.Single"/> representing the rotation angle (in degrees).
            </param>
            <remarks>
            This constructor is the base implementation for each other constructor.
            </remarks>
        </member>
        <member name="M:OpenGL.Quaternion.#ctor(OpenGL.Quaternion)">
            <summary>
            Quaternion constructor from euler rotation axis and rotation angle.
            </summary>
            <param name="other">
            A <see cref="T:OpenGL.Quaternion"/> representing the rotation axis.
            </param>
        </member>
        <member name="F:OpenGL.Quaternion._DefaultVector">
            <summary>
            The default rotation axis used by this quaternion when it is an identity.
            </summary>
        </member>
        <member name="F:OpenGL.Quaternion._Vector">
            <summary>
            Quaternion vector values.
            </summary>
            <remarks>
            If the quaternion is defined as a vector {q1, q2, q3, q4}, this field corresponds to the
            vector component {q1, q2, q3}. This is not actually a vector!
            </remarks>
        </member>
        <member name="F:OpenGL.Quaternion._CosAngle">
            <summary>
            Quaternion "scalar" component.
            </summary>
            <remarks>
            If the quaternion is defined as a vector {q1, q2, q3, q4}, this field corresponds to the
            scalar component q4. This is not actually an angle!
            </remarks>
        </member>
        <member name="P:OpenGL.Quaternion.RotationVector">
            <summary>
            Get or set the quaternion rotation unit vector.
            </summary>
        </member>
        <member name="P:OpenGL.Quaternion.RotationAngle">
            <summary>
            Get or set the quaternion rotation angle (in degrees).
            </summary>
        </member>
        <member name="M:OpenGL.Quaternion.SetEuler(OpenGL.Vertex3f,System.Single)">
            <summary>
            Set quaternion using rotation axis and rotation angle.
            </summary>
            <param name="rVector">
            A <see cref="T:OpenGL.Vertex3d"/> representing the rotation axis. It will be normalized.
            </param>
            <param name="rAngle">
            A <see cref="T:System.Single"/> representing the rotation angle (in degrees).
            </param>
            <remarks>
            This quaternion will result normalized.
            </remarks>
        </member>
        <member name="P:OpenGL.Quaternion.X">
            <summary>
            Quaternion <i>q1</i> component.
            </summary>
        </member>
        <member name="P:OpenGL.Quaternion.Y">
            <summary>
            Quaternion <i>q2</i> component.
            </summary>
        </member>
        <member name="P:OpenGL.Quaternion.Z">
            <summary>
            Quaternion <i>q3</i> component.
            </summary>
        </member>
        <member name="P:OpenGL.Quaternion.W">
            <summary>
            Quaternion <i>q4</i> component.
            </summary>
        </member>
        <member name="P:OpenGL.Quaternion.Magnitude">
            <summary>
            Compute this Quaternion magnitude.
            </summary>
        </member>
        <member name="P:OpenGL.Quaternion.IsIdentity">
            <summary>
            Determine whether this quaternion is identity (no rotation).
            </summary>
        </member>
        <member name="P:OpenGL.Quaternion.IsNormalized">
            <summary>
            Determine whether this quaternion is normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Quaternion.Normalize">
            <summary>
            Normalize this Quaternion.
            </summary>
        </member>
        <member name="M:OpenGL.Quaternion.Conjugate">
            <summary>
            Conjugate this Quaternion.
            </summary>
        </member>
        <member name="P:OpenGL.Quaternion.Conjugated">
            <summary>
            Get the conjugate of this Quaternion.
            </summary>
        </member>
        <member name="M:OpenGL.Quaternion.op_Multiply(OpenGL.Quaternion,OpenGL.Quaternion)">
            <summary>
            Quaternion multiplication (concatenate rotations).
            </summary>
            <param name="q1">
            A <see cref="T:OpenGL.Quaternion"/> representing the left multiplication operand. This rotation is the "starting" state.
            </param>
            <param name="q2">
            A <see cref="T:OpenGL.Quaternion"/> representing the right multiplication operand. This rotation is applied to <paramref name="q1"/>.
            </param>
            <returns>
            It returns the multiplication between two quaternions.
            </returns>
        </member>
        <member name="M:OpenGL.Quaternion.op_Multiply(OpenGL.Quaternion,OpenGL.Vertex3f)">
            <summary>
            Rotates a vector.
            </summary>
            <param name="q">
            A <see cref="T:OpenGL.Quaternion"/> representing the rotation.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3f"/> rotating on <paramref name="q"/>.
            </param>
            <returns>
            The rotated <see cref="T:OpenGL.Vertex3f"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Quaternion.op_Multiply(OpenGL.Quaternion,OpenGL.Vertex3d)">
            <summary>
            Rotates a vector.
            </summary>
            <param name="q">
            A <see cref="T:OpenGL.Quaternion"/> representing the rotation.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex3d"/> rotating on <paramref name="q"/>.
            </param>
            <returns>
            The rotated <see cref="T:OpenGL.Vertex3d"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Quaternion.op_Multiply(OpenGL.Quaternion,OpenGL.Vertex4f)">
            <summary>
            Rotates a vector.
            </summary>
            <param name="q">
            A <see cref="T:OpenGL.Quaternion"/> representing the rotation.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4f"/> rotating on <paramref name="q"/>.
            </param>
            <returns>
            The rotated <see cref="T:OpenGL.Vertex3f"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Quaternion.op_Multiply(OpenGL.Quaternion,OpenGL.Vertex4d)">
            <summary>
            Rotates a vector.
            </summary>
            <param name="q">
            A <see cref="T:OpenGL.Quaternion"/> representing the rotation.
            </param>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4d"/> rotating on <paramref name="q"/>.
            </param>
            <returns>
            The rotated <see cref="T:OpenGL.Vertex4d"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Quaternion.op_Explicit(OpenGL.Quaternion)~OpenGL.Matrix3x3f">
            <summary>
            
            </summary>
            <param name="q">
            A <see cref="T:OpenGL.Quaternion"/> to be casted to <see cref="T:OpenGL.Matrix3x3f"/>.
            </param>
            <returns>
            It returns <see cref="T:OpenGL.Matrix3x3f"/> representing the equivalent rotation matrix.
            </returns>
        </member>
        <member name="M:OpenGL.Quaternion.op_Explicit(OpenGL.Quaternion)~OpenGL.Matrix3x3d">
            <summary>
            
            </summary>
            <param name="q">
            A <see cref="T:OpenGL.Quaternion"/> to be casted to <see cref="T:OpenGL.Matrix3x3d"/>.
            </param>
            <returns>
            It returns <see cref="T:OpenGL.Matrix3x3d"/> representing the equivalent rotation matrix.
            </returns>
        </member>
        <member name="M:OpenGL.Quaternion.op_Explicit(OpenGL.Quaternion)~OpenGL.Matrix4x4f">
            <summary>
            
            </summary>
            <param name="q">
            A <see cref="T:OpenGL.Quaternion"/> to be casted to <see cref="T:OpenGL.Matrix4x4f"/>.
            </param>
            <returns>
            It returns <see cref="T:OpenGL.Matrix4x4f"/> representing the equivalent rotation matrix.
            </returns>
        </member>
        <member name="M:OpenGL.Quaternion.op_Explicit(OpenGL.Quaternion)~OpenGL.Matrix4x4d">
            <summary>
            
            </summary>
            <param name="q">
            A <see cref="T:OpenGL.Quaternion"/> to be casted to <see cref="T:OpenGL.Matrix4x4d"/>.
            </param>
            <returns>
            It returns <see cref="T:OpenGL.Matrix4x4d"/> representing the equivalent rotation matrix.
            </returns>
        </member>
        <member name="F:OpenGL.Quaternion.Identity">
            <summary>
            Identity quaternion (no rotation).
            </summary>
        </member>
        <member name="M:OpenGL.Quaternion.ToString">
            <summary>
            Stringify this Quaternion.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Quaternion.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex2ub">
            <summary>
            Vertex value type (byte coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2ub.#ctor(System.Byte)">
            <summary>
            Vertex2ub constructor.
            </summary>
            <param name="v">
            A <see cref="T:byte"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2ub.#ctor(System.Byte[])">
            <summary>
            Vertex2ub constructor.
            </summary>
            <param name="v">
            A <see cref="T:byte[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2ub.#ctor(System.Byte,System.Byte)">
            <summary>
            Vertex2ub constructor.
            </summary>
            <param name="x">
            A <see cref="T:byte"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:byte"/> that specify the Y coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2ub.x">
            <summary>
            X coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ub.y">
            <summary>
            Y coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ub.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Addition(OpenGL.Vertex2ub,OpenGL.Vertex2ub)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ub"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2ub"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ub"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Subtraction(OpenGL.Vertex2ub,OpenGL.Vertex2ub)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ub"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2ub"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ub"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Multiply(OpenGL.Vertex2ub,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ub"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Multiply(OpenGL.Vertex2ub,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ub"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Division(OpenGL.Vertex2ub,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ub"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Division(OpenGL.Vertex2ub,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ub"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Multiply(OpenGL.Vertex2ub,OpenGL.Vertex2ub)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ub"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2ub"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ub"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Multiply(OpenGL.Vertex2ub,System.Byte)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Byte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ub"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Division(OpenGL.Vertex2ub,System.Byte)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Byte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ub"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Equality(OpenGL.Vertex2ub,OpenGL.Vertex2ub)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Inequality(OpenGL.Vertex2ub,OpenGL.Vertex2ub)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_LessThan(OpenGL.Vertex2ub,OpenGL.Vertex2ub)">
            <summary>
            Less than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_GreaterThan(OpenGL.Vertex2ub,OpenGL.Vertex2ub)">
            <summary>
            Greater than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_LessThanOrEqual(OpenGL.Vertex2ub,OpenGL.Vertex2ub)">
            <summary>
            Less than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_GreaterThanOrEqual(OpenGL.Vertex2ub,OpenGL.Vertex2ub)">
            <summary>
            Greater than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Implicit(OpenGL.Vertex2ub)~System.Byte[]">
            <summary>
            Cast to byte[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:byte[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.op_Explicit(OpenGL.Vertex2ub)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.Module">
            <summary>
            Compute bidimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.ModuleSquared">
            <summary>
            Compute bidimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex2ub.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2ub.Min(OpenGL.Vertex2ub[])">
            <summary>
            Get the minimum of an array of Vertex2ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ub[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2ub holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.Min(OpenGL.Vertex2ub*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex2ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ub*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2ub holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.Max(OpenGL.Vertex2ub[])">
            <summary>
            Get the maximum of an array of Vertex2ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ub[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2ub holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.Max(OpenGL.Vertex2ub*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex2ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ub*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2ub holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.MinMax(OpenGL.Vertex2ub[],OpenGL.Vertex2ub@,OpenGL.Vertex2ub@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ub[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2ub"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2ub"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2ub.MinMax(OpenGL.Vertex2ub*,System.UInt32,OpenGL.Vertex2ub@,OpenGL.Vertex2ub@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ub*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2ub"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2ub"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2ub.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ub.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ub.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ub.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ub.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ub.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2ub.Equals(OpenGL.Vertex2ub)">
            <summary>
            Indicates whether the this Vertex2ub is equal to another Vertex2ub.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex2ub"/> to compare with this Vertex2ub.
            </param>
            <returns>
            It returns true if the this Vertex2ub is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ub.ToString">
            <summary>
            Stringify this Vertex2ub.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex2ub.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex2b">
            <summary>
            Vertex value type (sbyte coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2b.#ctor(System.SByte)">
            <summary>
            Vertex2b constructor.
            </summary>
            <param name="v">
            A <see cref="T:sbyte"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2b.#ctor(System.SByte[])">
            <summary>
            Vertex2b constructor.
            </summary>
            <param name="v">
            A <see cref="T:sbyte[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2b.#ctor(System.SByte,System.SByte)">
            <summary>
            Vertex2b constructor.
            </summary>
            <param name="x">
            A <see cref="T:sbyte"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:sbyte"/> that specify the Y coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2b.x">
            <summary>
            X coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2b.y">
            <summary>
            Y coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2b.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2b.op_UnaryNegation(OpenGL.Vertex2b)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex2b to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Addition(OpenGL.Vertex2b,OpenGL.Vertex2b)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2b"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2b"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2b"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Subtraction(OpenGL.Vertex2b,OpenGL.Vertex2b)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2b"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2b"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2b"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Multiply(OpenGL.Vertex2b,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2b"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Multiply(OpenGL.Vertex2b,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2b"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Division(OpenGL.Vertex2b,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2b"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Division(OpenGL.Vertex2b,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2b"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Multiply(OpenGL.Vertex2b,OpenGL.Vertex2b)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2b"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2b"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2b"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Multiply(OpenGL.Vertex2b,System.SByte)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.SByte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2b"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Division(OpenGL.Vertex2b,System.SByte)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.SByte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2b"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Equality(OpenGL.Vertex2b,OpenGL.Vertex2b)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Inequality(OpenGL.Vertex2b,OpenGL.Vertex2b)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_LessThan(OpenGL.Vertex2b,OpenGL.Vertex2b)">
            <summary>
            Less than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_GreaterThan(OpenGL.Vertex2b,OpenGL.Vertex2b)">
            <summary>
            Greater than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_LessThanOrEqual(OpenGL.Vertex2b,OpenGL.Vertex2b)">
            <summary>
            Less than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_GreaterThanOrEqual(OpenGL.Vertex2b,OpenGL.Vertex2b)">
            <summary>
            Greater than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Implicit(OpenGL.Vertex2b)~System.SByte[]">
            <summary>
            Cast to sbyte[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:sbyte[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.op_Explicit(OpenGL.Vertex2b)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.Module">
            <summary>
            Compute bidimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.ModuleSquared">
            <summary>
            Compute bidimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex2b.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2b.Min(OpenGL.Vertex2b[])">
            <summary>
            Get the minimum of an array of Vertex2b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2b[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2b holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.Min(OpenGL.Vertex2b*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex2b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2b*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2b holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.Max(OpenGL.Vertex2b[])">
            <summary>
            Get the maximum of an array of Vertex2b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2b[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2b holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.Max(OpenGL.Vertex2b*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex2b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2b*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2b holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.MinMax(OpenGL.Vertex2b[],OpenGL.Vertex2b@,OpenGL.Vertex2b@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2b[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2b"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2b"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2b.MinMax(OpenGL.Vertex2b*,System.UInt32,OpenGL.Vertex2b@,OpenGL.Vertex2b@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2b*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2b"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2b"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2b.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2b.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2b.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2b.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2b.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2b.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2b.Equals(OpenGL.Vertex2b)">
            <summary>
            Indicates whether the this Vertex2b is equal to another Vertex2b.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex2b"/> to compare with this Vertex2b.
            </param>
            <returns>
            It returns true if the this Vertex2b is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2b.ToString">
            <summary>
            Stringify this Vertex2b.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex2b.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex2us">
            <summary>
            Vertex value type (ushort coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2us.#ctor(System.UInt16)">
            <summary>
            Vertex2us constructor.
            </summary>
            <param name="v">
            A <see cref="T:ushort"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2us.#ctor(System.UInt16[])">
            <summary>
            Vertex2us constructor.
            </summary>
            <param name="v">
            A <see cref="T:ushort[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2us.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Vertex2us constructor.
            </summary>
            <param name="x">
            A <see cref="T:ushort"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:ushort"/> that specify the Y coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2us.x">
            <summary>
            X coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2us.y">
            <summary>
            Y coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2us.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Addition(OpenGL.Vertex2us,OpenGL.Vertex2us)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2us"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2us"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2us"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Subtraction(OpenGL.Vertex2us,OpenGL.Vertex2us)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2us"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2us"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2us"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Multiply(OpenGL.Vertex2us,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2us"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Multiply(OpenGL.Vertex2us,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2us"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Division(OpenGL.Vertex2us,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2us"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Division(OpenGL.Vertex2us,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2us"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Multiply(OpenGL.Vertex2us,OpenGL.Vertex2us)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2us"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2us"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2us"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Multiply(OpenGL.Vertex2us,System.UInt16)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2us"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Division(OpenGL.Vertex2us,System.UInt16)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2us"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Equality(OpenGL.Vertex2us,OpenGL.Vertex2us)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Inequality(OpenGL.Vertex2us,OpenGL.Vertex2us)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_LessThan(OpenGL.Vertex2us,OpenGL.Vertex2us)">
            <summary>
            Less than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_GreaterThan(OpenGL.Vertex2us,OpenGL.Vertex2us)">
            <summary>
            Greater than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_LessThanOrEqual(OpenGL.Vertex2us,OpenGL.Vertex2us)">
            <summary>
            Less than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_GreaterThanOrEqual(OpenGL.Vertex2us,OpenGL.Vertex2us)">
            <summary>
            Greater than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Implicit(OpenGL.Vertex2us)~System.UInt16[]">
            <summary>
            Cast to ushort[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ushort[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.op_Explicit(OpenGL.Vertex2us)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.Module">
            <summary>
            Compute bidimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.ModuleSquared">
            <summary>
            Compute bidimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex2us.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2us.Min(OpenGL.Vertex2us[])">
            <summary>
            Get the minimum of an array of Vertex2us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2us[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2us holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.Min(OpenGL.Vertex2us*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex2us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2us*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2us holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.Max(OpenGL.Vertex2us[])">
            <summary>
            Get the maximum of an array of Vertex2us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2us[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2us holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.Max(OpenGL.Vertex2us*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex2us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2us*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2us holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.MinMax(OpenGL.Vertex2us[],OpenGL.Vertex2us@,OpenGL.Vertex2us@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2us[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2us"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2us"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2us.MinMax(OpenGL.Vertex2us*,System.UInt32,OpenGL.Vertex2us@,OpenGL.Vertex2us@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2us*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2us"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2us"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2us.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2us.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2us.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2us.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2us.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2us.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2us.Equals(OpenGL.Vertex2us)">
            <summary>
            Indicates whether the this Vertex2us is equal to another Vertex2us.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex2us"/> to compare with this Vertex2us.
            </param>
            <returns>
            It returns true if the this Vertex2us is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2us.ToString">
            <summary>
            Stringify this Vertex2us.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex2us.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex2s">
            <summary>
            Vertex value type (short coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2s.#ctor(System.Int16)">
            <summary>
            Vertex2s constructor.
            </summary>
            <param name="v">
            A <see cref="T:short"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2s.#ctor(System.Int16[])">
            <summary>
            Vertex2s constructor.
            </summary>
            <param name="v">
            A <see cref="T:short[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2s.#ctor(System.Int16,System.Int16)">
            <summary>
            Vertex2s constructor.
            </summary>
            <param name="x">
            A <see cref="T:short"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:short"/> that specify the Y coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2s.x">
            <summary>
            X coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2s.y">
            <summary>
            Y coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2s.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2s.op_UnaryNegation(OpenGL.Vertex2s)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex2s to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Addition(OpenGL.Vertex2s,OpenGL.Vertex2s)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2s"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2s"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2s"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Subtraction(OpenGL.Vertex2s,OpenGL.Vertex2s)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2s"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2s"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2s"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Multiply(OpenGL.Vertex2s,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2s"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Multiply(OpenGL.Vertex2s,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2s"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Division(OpenGL.Vertex2s,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2s"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Division(OpenGL.Vertex2s,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2s"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Multiply(OpenGL.Vertex2s,OpenGL.Vertex2s)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2s"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2s"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2s"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Multiply(OpenGL.Vertex2s,System.Int16)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2s"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Division(OpenGL.Vertex2s,System.Int16)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2s"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Equality(OpenGL.Vertex2s,OpenGL.Vertex2s)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Inequality(OpenGL.Vertex2s,OpenGL.Vertex2s)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_LessThan(OpenGL.Vertex2s,OpenGL.Vertex2s)">
            <summary>
            Less than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_GreaterThan(OpenGL.Vertex2s,OpenGL.Vertex2s)">
            <summary>
            Greater than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_LessThanOrEqual(OpenGL.Vertex2s,OpenGL.Vertex2s)">
            <summary>
            Less than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_GreaterThanOrEqual(OpenGL.Vertex2s,OpenGL.Vertex2s)">
            <summary>
            Greater than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Implicit(OpenGL.Vertex2s)~System.Int16[]">
            <summary>
            Cast to short[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:short[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.op_Explicit(OpenGL.Vertex2s)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.Module">
            <summary>
            Compute bidimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.ModuleSquared">
            <summary>
            Compute bidimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex2s.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2s.Min(OpenGL.Vertex2s[])">
            <summary>
            Get the minimum of an array of Vertex2s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2s[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2s holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.Min(OpenGL.Vertex2s*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex2s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2s*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2s holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.Max(OpenGL.Vertex2s[])">
            <summary>
            Get the maximum of an array of Vertex2s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2s[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2s holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.Max(OpenGL.Vertex2s*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex2s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2s*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2s holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.MinMax(OpenGL.Vertex2s[],OpenGL.Vertex2s@,OpenGL.Vertex2s@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2s[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2s"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2s"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2s.MinMax(OpenGL.Vertex2s*,System.UInt32,OpenGL.Vertex2s@,OpenGL.Vertex2s@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2s*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2s"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2s"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2s.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2s.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2s.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2s.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2s.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2s.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2s.Equals(OpenGL.Vertex2s)">
            <summary>
            Indicates whether the this Vertex2s is equal to another Vertex2s.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex2s"/> to compare with this Vertex2s.
            </param>
            <returns>
            It returns true if the this Vertex2s is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2s.ToString">
            <summary>
            Stringify this Vertex2s.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex2s.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex2ui">
            <summary>
            Vertex value type (uint coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2ui.#ctor(System.UInt32)">
            <summary>
            Vertex2ui constructor.
            </summary>
            <param name="v">
            A <see cref="T:uint"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2ui.#ctor(System.UInt32[])">
            <summary>
            Vertex2ui constructor.
            </summary>
            <param name="v">
            A <see cref="T:uint[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2ui.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Vertex2ui constructor.
            </summary>
            <param name="x">
            A <see cref="T:uint"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:uint"/> that specify the Y coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2ui.x">
            <summary>
            X coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ui.y">
            <summary>
            Y coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ui.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Addition(OpenGL.Vertex2ui,OpenGL.Vertex2ui)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ui"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2ui"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ui"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Subtraction(OpenGL.Vertex2ui,OpenGL.Vertex2ui)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ui"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2ui"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ui"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Multiply(OpenGL.Vertex2ui,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ui"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Multiply(OpenGL.Vertex2ui,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ui"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Division(OpenGL.Vertex2ui,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ui"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Division(OpenGL.Vertex2ui,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ui"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Multiply(OpenGL.Vertex2ui,OpenGL.Vertex2ui)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ui"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2ui"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ui"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Multiply(OpenGL.Vertex2ui,System.UInt32)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ui"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Division(OpenGL.Vertex2ui,System.UInt32)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2ui"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Equality(OpenGL.Vertex2ui,OpenGL.Vertex2ui)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Inequality(OpenGL.Vertex2ui,OpenGL.Vertex2ui)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_LessThan(OpenGL.Vertex2ui,OpenGL.Vertex2ui)">
            <summary>
            Less than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_GreaterThan(OpenGL.Vertex2ui,OpenGL.Vertex2ui)">
            <summary>
            Greater than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_LessThanOrEqual(OpenGL.Vertex2ui,OpenGL.Vertex2ui)">
            <summary>
            Less than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_GreaterThanOrEqual(OpenGL.Vertex2ui,OpenGL.Vertex2ui)">
            <summary>
            Greater than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Implicit(OpenGL.Vertex2ui)~System.UInt32[]">
            <summary>
            Cast to uint[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:uint[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.op_Explicit(OpenGL.Vertex2ui)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.Module">
            <summary>
            Compute bidimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.ModuleSquared">
            <summary>
            Compute bidimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex2ui.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2ui.Min(OpenGL.Vertex2ui[])">
            <summary>
            Get the minimum of an array of Vertex2ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ui[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2ui holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.Min(OpenGL.Vertex2ui*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex2ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ui*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2ui holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.Max(OpenGL.Vertex2ui[])">
            <summary>
            Get the maximum of an array of Vertex2ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ui[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2ui holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.Max(OpenGL.Vertex2ui*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex2ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ui*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2ui holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.MinMax(OpenGL.Vertex2ui[],OpenGL.Vertex2ui@,OpenGL.Vertex2ui@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ui[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2ui"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2ui"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2ui.MinMax(OpenGL.Vertex2ui*,System.UInt32,OpenGL.Vertex2ui@,OpenGL.Vertex2ui@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2ui*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2ui"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2ui"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2ui.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ui.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ui.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ui.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ui.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2ui.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2ui.Equals(OpenGL.Vertex2ui)">
            <summary>
            Indicates whether the this Vertex2ui is equal to another Vertex2ui.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex2ui"/> to compare with this Vertex2ui.
            </param>
            <returns>
            It returns true if the this Vertex2ui is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2ui.ToString">
            <summary>
            Stringify this Vertex2ui.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex2ui.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex2i">
            <summary>
            Vertex value type (int coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2i.#ctor(System.Int32)">
            <summary>
            Vertex2i constructor.
            </summary>
            <param name="v">
            A <see cref="T:int"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2i.#ctor(System.Int32[])">
            <summary>
            Vertex2i constructor.
            </summary>
            <param name="v">
            A <see cref="T:int[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Vertex2i constructor.
            </summary>
            <param name="x">
            A <see cref="T:int"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:int"/> that specify the Y coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2i.x">
            <summary>
            X coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2i.y">
            <summary>
            Y coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2i.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2i.op_UnaryNegation(OpenGL.Vertex2i)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex2i to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Addition(OpenGL.Vertex2i,OpenGL.Vertex2i)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2i"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2i"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2i"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Subtraction(OpenGL.Vertex2i,OpenGL.Vertex2i)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2i"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2i"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2i"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Multiply(OpenGL.Vertex2i,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2i"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Multiply(OpenGL.Vertex2i,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2i"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Division(OpenGL.Vertex2i,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2i"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Division(OpenGL.Vertex2i,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2i"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Multiply(OpenGL.Vertex2i,OpenGL.Vertex2i)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2i"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2i"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2i"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Multiply(OpenGL.Vertex2i,System.Int32)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2i"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Division(OpenGL.Vertex2i,System.Int32)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2i"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Equality(OpenGL.Vertex2i,OpenGL.Vertex2i)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Inequality(OpenGL.Vertex2i,OpenGL.Vertex2i)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_LessThan(OpenGL.Vertex2i,OpenGL.Vertex2i)">
            <summary>
            Less than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_GreaterThan(OpenGL.Vertex2i,OpenGL.Vertex2i)">
            <summary>
            Greater than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_LessThanOrEqual(OpenGL.Vertex2i,OpenGL.Vertex2i)">
            <summary>
            Less than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_GreaterThanOrEqual(OpenGL.Vertex2i,OpenGL.Vertex2i)">
            <summary>
            Greater than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Implicit(OpenGL.Vertex2i)~System.Int32[]">
            <summary>
            Cast to int[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:int[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.op_Explicit(OpenGL.Vertex2i)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.Module">
            <summary>
            Compute bidimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.ModuleSquared">
            <summary>
            Compute bidimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex2i.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2i.Min(OpenGL.Vertex2i[])">
            <summary>
            Get the minimum of an array of Vertex2i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2i[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2i holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.Min(OpenGL.Vertex2i*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex2i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2i*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2i holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.Max(OpenGL.Vertex2i[])">
            <summary>
            Get the maximum of an array of Vertex2i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2i[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2i holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.Max(OpenGL.Vertex2i*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex2i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2i*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2i holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.MinMax(OpenGL.Vertex2i[],OpenGL.Vertex2i@,OpenGL.Vertex2i@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2i[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2i"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2i"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2i.MinMax(OpenGL.Vertex2i*,System.UInt32,OpenGL.Vertex2i@,OpenGL.Vertex2i@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2i*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2i"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2i"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2i.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2i.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2i.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2i.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2i.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2i.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2i.Equals(OpenGL.Vertex2i)">
            <summary>
            Indicates whether the this Vertex2i is equal to another Vertex2i.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex2i"/> to compare with this Vertex2i.
            </param>
            <returns>
            It returns true if the this Vertex2i is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2i.ToString">
            <summary>
            Stringify this Vertex2i.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex2i.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex2f">
            <summary>
            Vertex value type (float coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2f.#ctor(System.Single)">
            <summary>
            Vertex2f constructor.
            </summary>
            <param name="v">
            A <see cref="T:float"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2f.#ctor(System.Single[])">
            <summary>
            Vertex2f constructor.
            </summary>
            <param name="v">
            A <see cref="T:float[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2f.#ctor(System.Single,System.Single)">
            <summary>
            Vertex2f constructor.
            </summary>
            <param name="x">
            A <see cref="T:float"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:float"/> that specify the Y coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2f.x">
            <summary>
            X coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2f.y">
            <summary>
            Y coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2f.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2f.op_UnaryNegation(OpenGL.Vertex2f)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex2f to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Addition(OpenGL.Vertex2f,OpenGL.Vertex2f)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2f"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2f"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Subtraction(OpenGL.Vertex2f,OpenGL.Vertex2f)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2f"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2f"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Multiply(OpenGL.Vertex2f,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2f"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Multiply(OpenGL.Vertex2f,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2f"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Division(OpenGL.Vertex2f,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2f"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Division(OpenGL.Vertex2f,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2f"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Multiply(OpenGL.Vertex2f,OpenGL.Vertex2f)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2f"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2f"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Equality(OpenGL.Vertex2f,OpenGL.Vertex2f)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Inequality(OpenGL.Vertex2f,OpenGL.Vertex2f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_LessThan(OpenGL.Vertex2f,OpenGL.Vertex2f)">
            <summary>
            Less than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_GreaterThan(OpenGL.Vertex2f,OpenGL.Vertex2f)">
            <summary>
            Greater than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_LessThanOrEqual(OpenGL.Vertex2f,OpenGL.Vertex2f)">
            <summary>
            Less than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_GreaterThanOrEqual(OpenGL.Vertex2f,OpenGL.Vertex2f)">
            <summary>
            Greater than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Implicit(OpenGL.Vertex2f)~System.Single[]">
            <summary>
            Cast to float[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Explicit(OpenGL.Vertex2f)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Implicit(OpenGL.Vertex2f)~OpenGL.Vertex2d">
            <summary>
            Cast to Vertex2d operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.op_Implicit(OpenGL.Vertex2f)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.Module">
            <summary>
            Compute bidimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.ModuleSquared">
            <summary>
            Compute bidimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex2f.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2f.Min(OpenGL.Vertex2f[])">
            <summary>
            Get the minimum of an array of Vertex2f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2f[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2f holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.Min(OpenGL.Vertex2f*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex2f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2f*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2f holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.Max(OpenGL.Vertex2f[])">
            <summary>
            Get the maximum of an array of Vertex2f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2f[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2f holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.Max(OpenGL.Vertex2f*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex2f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2f*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2f holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.MinMax(OpenGL.Vertex2f[],OpenGL.Vertex2f@,OpenGL.Vertex2f@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2f[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2f"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2f"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2f.MinMax(OpenGL.Vertex2f*,System.UInt32,OpenGL.Vertex2f@,OpenGL.Vertex2f@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2f*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2f"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2f"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2f.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2f.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2f.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2f.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2f.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2f.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2f.Equals(OpenGL.Vertex2f)">
            <summary>
            Indicates whether the this Vertex2f is equal to another Vertex2f.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex2f"/> to compare with this Vertex2f.
            </param>
            <returns>
            It returns true if the this Vertex2f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2f.ToString">
            <summary>
            Stringify this Vertex2f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex2f.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex2d">
            <summary>
            Vertex value type (double coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2d.#ctor(System.Double)">
            <summary>
            Vertex2d constructor.
            </summary>
            <param name="v">
            A <see cref="T:double"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2d.#ctor(System.Double[])">
            <summary>
            Vertex2d constructor.
            </summary>
            <param name="v">
            A <see cref="T:double[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2d.#ctor(System.Double,System.Double)">
            <summary>
            Vertex2d constructor.
            </summary>
            <param name="x">
            A <see cref="T:double"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:double"/> that specify the Y coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2d.x">
            <summary>
            X coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2d.y">
            <summary>
            Y coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2d.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2d.op_UnaryNegation(OpenGL.Vertex2d)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex2d to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_Addition(OpenGL.Vertex2d,OpenGL.Vertex2d)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2d"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2d"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2d"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_Subtraction(OpenGL.Vertex2d,OpenGL.Vertex2d)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2d"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2d"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2d"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_Multiply(OpenGL.Vertex2d,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2d"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_Multiply(OpenGL.Vertex2d,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2d"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_Division(OpenGL.Vertex2d,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2d"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_Division(OpenGL.Vertex2d,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2d"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_Multiply(OpenGL.Vertex2d,OpenGL.Vertex2d)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2d"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2d"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2d"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_Equality(OpenGL.Vertex2d,OpenGL.Vertex2d)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_Inequality(OpenGL.Vertex2d,OpenGL.Vertex2d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_LessThan(OpenGL.Vertex2d,OpenGL.Vertex2d)">
            <summary>
            Less than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_GreaterThan(OpenGL.Vertex2d,OpenGL.Vertex2d)">
            <summary>
            Greater than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_LessThanOrEqual(OpenGL.Vertex2d,OpenGL.Vertex2d)">
            <summary>
            Less than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_GreaterThanOrEqual(OpenGL.Vertex2d,OpenGL.Vertex2d)">
            <summary>
            Greater than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_Implicit(OpenGL.Vertex2d)~System.Double[]">
            <summary>
            Cast to double[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.op_Explicit(OpenGL.Vertex2d)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.Module">
            <summary>
            Compute bidimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.ModuleSquared">
            <summary>
            Compute bidimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex2d.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2d.Min(OpenGL.Vertex2d[])">
            <summary>
            Get the minimum of an array of Vertex2d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2d[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2d holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.Min(OpenGL.Vertex2d*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex2d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2d*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2d holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.Max(OpenGL.Vertex2d[])">
            <summary>
            Get the maximum of an array of Vertex2d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2d[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2d holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.Max(OpenGL.Vertex2d*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex2d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2d*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2d holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.MinMax(OpenGL.Vertex2d[],OpenGL.Vertex2d@,OpenGL.Vertex2d@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2d[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2d"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2d"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2d.MinMax(OpenGL.Vertex2d*,System.UInt32,OpenGL.Vertex2d@,OpenGL.Vertex2d@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2d*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2d"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2d"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2d.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2d.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2d.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2d.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2d.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2d.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2d.Equals(OpenGL.Vertex2d)">
            <summary>
            Indicates whether the this Vertex2d is equal to another Vertex2d.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex2d"/> to compare with this Vertex2d.
            </param>
            <returns>
            It returns true if the this Vertex2d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2d.ToString">
            <summary>
            Stringify this Vertex2d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex2d.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex2hf">
            <summary>
            Vertex value type (HalfFloat coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2hf.#ctor(OpenGL.HalfFloat)">
            <summary>
            Vertex2hf constructor.
            </summary>
            <param name="v">
            A <see cref="T:HalfFloat"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2hf.#ctor(OpenGL.HalfFloat[])">
            <summary>
            Vertex2hf constructor.
            </summary>
            <param name="v">
            A <see cref="T:HalfFloat[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2hf.#ctor(OpenGL.HalfFloat,OpenGL.HalfFloat)">
            <summary>
            Vertex2hf constructor.
            </summary>
            <param name="x">
            A <see cref="T:HalfFloat"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:HalfFloat"/> that specify the Y coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2hf.x">
            <summary>
            X coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2hf.y">
            <summary>
            Y coordinate for bidimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2hf.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_UnaryNegation(OpenGL.Vertex2hf)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex2hf to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_Addition(OpenGL.Vertex2hf,OpenGL.Vertex2hf)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2hf"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2hf"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2hf"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_Subtraction(OpenGL.Vertex2hf,OpenGL.Vertex2hf)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2hf"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2hf"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2hf"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_Multiply(OpenGL.Vertex2hf,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2hf"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_Multiply(OpenGL.Vertex2hf,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2hf"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_Division(OpenGL.Vertex2hf,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2hf"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_Division(OpenGL.Vertex2hf,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2hf"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_Multiply(OpenGL.Vertex2hf,OpenGL.Vertex2hf)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex2hf"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex2hf"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2hf"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_Equality(OpenGL.Vertex2hf,OpenGL.Vertex2hf)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_Inequality(OpenGL.Vertex2hf,OpenGL.Vertex2hf)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_LessThan(OpenGL.Vertex2hf,OpenGL.Vertex2hf)">
            <summary>
            Less than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_GreaterThan(OpenGL.Vertex2hf,OpenGL.Vertex2hf)">
            <summary>
            Greater than operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_LessThanOrEqual(OpenGL.Vertex2hf,OpenGL.Vertex2hf)">
            <summary>
            Less than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_GreaterThanOrEqual(OpenGL.Vertex2hf,OpenGL.Vertex2hf)">
            <summary>
            Greater than or equal to operator.
            </summary>
            <param name="v1">The left operand.</param>
            <param name="v2">The right operand</param>
            <returns>
            It returns true if <paramref name="v1"/> is less than or equal to <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_Implicit(OpenGL.Vertex2hf)~OpenGL.HalfFloat[]">
            <summary>
            Cast to HalfFloat[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:HalfFloat[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.op_Explicit(OpenGL.Vertex2hf)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex2hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.Module">
            <summary>
            Compute bidimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.ModuleSquared">
            <summary>
            Compute bidimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex2hf.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2hf.Min(OpenGL.Vertex2hf[])">
            <summary>
            Get the minimum of an array of Vertex2hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2hf[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2hf holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.Min(OpenGL.Vertex2hf*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex2hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2hf*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2hf holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.Max(OpenGL.Vertex2hf[])">
            <summary>
            Get the maximum of an array of Vertex2hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2hf[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex2hf holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.Max(OpenGL.Vertex2hf*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex2hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2hf*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex2hf holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.MinMax(OpenGL.Vertex2hf[],OpenGL.Vertex2hf@,OpenGL.Vertex2hf@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2hf[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2hf"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2hf"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex2hf.MinMax(OpenGL.Vertex2hf*,System.UInt32,OpenGL.Vertex2hf@,OpenGL.Vertex2hf@)">
            <summary>
            Get the minimum and maximum of an array of Vertex2hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex2hf*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex2hf"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex2hf"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex2hf.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2hf.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2hf.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2hf.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2hf.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex2hf.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex2hf.Equals(OpenGL.Vertex2hf)">
            <summary>
            Indicates whether the this Vertex2hf is equal to another Vertex2hf.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex2hf"/> to compare with this Vertex2hf.
            </param>
            <returns>
            It returns true if the this Vertex2hf is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex2hf.ToString">
            <summary>
            Stringify this Vertex2hf.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex2hf.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex3ub">
            <summary>
            Vertex value type (byte coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3ub.#ctor(System.Byte)">
            <summary>
            Vertex3ub constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.Byte"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3ub.#ctor(System.Byte[])">
            <summary>
            Vertex3ub constructor.
            </summary>
            <param name="v">
            A <see cref="T:byte[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3ub.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Vertex3ub constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Byte"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Byte"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Byte"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3ub.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ub.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ub.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ub.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Addition(OpenGL.Vertex3ub,OpenGL.Vertex3ub)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ub"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3ub"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ub"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Subtraction(OpenGL.Vertex3ub,OpenGL.Vertex3ub)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ub"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3ub"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ub"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Multiply(OpenGL.Vertex3ub,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ub"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Multiply(OpenGL.Vertex3ub,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ub"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Division(OpenGL.Vertex3ub,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ub"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Division(OpenGL.Vertex3ub,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ub"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Multiply(OpenGL.Vertex3ub,OpenGL.Vertex3ub)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ub"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3ub"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ub"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_ExclusiveOr(OpenGL.Vertex3ub,OpenGL.Vertex3ub)">
            <summary>
            Cross product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ub"/> representing the left cross product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3ub"/> representing the right cross product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ub"/> representing the cross product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Multiply(OpenGL.Vertex3ub,System.Byte)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Byte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ub"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Division(OpenGL.Vertex3ub,System.Byte)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Byte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ub"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Equality(OpenGL.Vertex3ub,OpenGL.Vertex3ub)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Inequality(OpenGL.Vertex3ub,OpenGL.Vertex3ub)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Implicit(OpenGL.Vertex3ub)~System.Byte[]">
            <summary>
            Cast to byte[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:byte[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Implicit(OpenGL.Vertex3ub)~OpenGL.Vertex4ub">
            <summary>
            Cast to Vertex4ub operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3ub"/> to be casted.
            </param>
            <returns>
            A normalized <see cref="T:OpenGL.Vertex4ub"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Explicit(OpenGL.Vertex3ub)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.op_Explicit(OpenGL.Vertex3ub)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex3ub.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3ub.Min(OpenGL.Vertex3ub[])">
            <summary>
            Get the minimum of an array of Vertex3ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ub[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3ub holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.Min(OpenGL.Vertex3ub*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex3ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ub*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3ub holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.Max(OpenGL.Vertex3ub[])">
            <summary>
            Get the maximum of an array of Vertex3ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ub[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3ub holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.Max(OpenGL.Vertex3ub*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex3ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ub*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3ub holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.MinMax(OpenGL.Vertex3ub[],OpenGL.Vertex3ub@,OpenGL.Vertex3ub@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ub[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3ub"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3ub"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3ub.MinMax(OpenGL.Vertex3ub*,System.UInt32,OpenGL.Vertex3ub@,OpenGL.Vertex3ub@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ub*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3ub"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3ub"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3ub.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ub.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ub.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ub.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ub.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ub.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ub.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3ub.Equals(OpenGL.Vertex3ub,System.Byte)">
            <summary>
            Indicates whether the this Vertex3ub is equal to another Vertex3ub, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3ub"/> to compare with this Vertex3ub.
            </param>
            <param name="precision">
            The <see cref="T:System.Byte"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex3ub is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.Equals(OpenGL.Vertex3ub)">
            <summary>
            Indicates whether the this Vertex3ub is equal to another Vertex3ub.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3ub"/> to compare with this Vertex3ub.
            </param>
            <returns>
            It returns true if the this Vertex3ub is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ub.ToString">
            <summary>
            Stringify this Vertex3ub.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex3ub.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex3b">
            <summary>
            Vertex value type (sbyte coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3b.#ctor(System.SByte)">
            <summary>
            Vertex3b constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.SByte"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3b.#ctor(System.SByte[])">
            <summary>
            Vertex3b constructor.
            </summary>
            <param name="v">
            A <see cref="T:sbyte[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3b.#ctor(System.SByte,System.SByte,System.SByte)">
            <summary>
            Vertex3b constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.SByte"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.SByte"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.SByte"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3b.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3b.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3b.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3b.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3b.op_UnaryNegation(OpenGL.Vertex3b)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex3b to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Addition(OpenGL.Vertex3b,OpenGL.Vertex3b)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3b"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3b"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3b"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Subtraction(OpenGL.Vertex3b,OpenGL.Vertex3b)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3b"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3b"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3b"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Multiply(OpenGL.Vertex3b,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3b"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Multiply(OpenGL.Vertex3b,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3b"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Division(OpenGL.Vertex3b,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3b"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Division(OpenGL.Vertex3b,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3b"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Multiply(OpenGL.Vertex3b,OpenGL.Vertex3b)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3b"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3b"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3b"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_ExclusiveOr(OpenGL.Vertex3b,OpenGL.Vertex3b)">
            <summary>
            Cross product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3b"/> representing the left cross product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3b"/> representing the right cross product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3b"/> representing the cross product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Multiply(OpenGL.Vertex3b,System.SByte)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.SByte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3b"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Division(OpenGL.Vertex3b,System.SByte)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.SByte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3b"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Equality(OpenGL.Vertex3b,OpenGL.Vertex3b)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Inequality(OpenGL.Vertex3b,OpenGL.Vertex3b)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Implicit(OpenGL.Vertex3b)~System.SByte[]">
            <summary>
            Cast to sbyte[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:sbyte[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Implicit(OpenGL.Vertex3b)~OpenGL.Vertex4b">
            <summary>
            Cast to Vertex4b operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3b"/> to be casted.
            </param>
            <returns>
            A normalized <see cref="T:OpenGL.Vertex4b"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Explicit(OpenGL.Vertex3b)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.op_Explicit(OpenGL.Vertex3b)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex3b.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3b.Min(OpenGL.Vertex3b[])">
            <summary>
            Get the minimum of an array of Vertex3b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3b[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3b holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.Min(OpenGL.Vertex3b*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex3b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3b*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3b holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.Max(OpenGL.Vertex3b[])">
            <summary>
            Get the maximum of an array of Vertex3b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3b[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3b holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.Max(OpenGL.Vertex3b*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex3b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3b*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3b holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.MinMax(OpenGL.Vertex3b[],OpenGL.Vertex3b@,OpenGL.Vertex3b@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3b[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3b"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3b"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3b.MinMax(OpenGL.Vertex3b*,System.UInt32,OpenGL.Vertex3b@,OpenGL.Vertex3b@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3b*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3b"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3b"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3b.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3b.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3b.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3b.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3b.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3b.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3b.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3b.Equals(OpenGL.Vertex3b,System.SByte)">
            <summary>
            Indicates whether the this Vertex3b is equal to another Vertex3b, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3b"/> to compare with this Vertex3b.
            </param>
            <param name="precision">
            The <see cref="T:System.SByte"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex3b is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.Equals(OpenGL.Vertex3b)">
            <summary>
            Indicates whether the this Vertex3b is equal to another Vertex3b.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3b"/> to compare with this Vertex3b.
            </param>
            <returns>
            It returns true if the this Vertex3b is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3b.ToString">
            <summary>
            Stringify this Vertex3b.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex3b.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex3us">
            <summary>
            Vertex value type (ushort coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3us.#ctor(System.UInt16)">
            <summary>
            Vertex3us constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.UInt16"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3us.#ctor(System.UInt16[])">
            <summary>
            Vertex3us constructor.
            </summary>
            <param name="v">
            A <see cref="T:ushort[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3us.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Vertex3us constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.UInt16"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.UInt16"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.UInt16"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3us.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3us.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3us.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3us.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Addition(OpenGL.Vertex3us,OpenGL.Vertex3us)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3us"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3us"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3us"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Subtraction(OpenGL.Vertex3us,OpenGL.Vertex3us)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3us"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3us"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3us"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Multiply(OpenGL.Vertex3us,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3us"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Multiply(OpenGL.Vertex3us,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3us"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Division(OpenGL.Vertex3us,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3us"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Division(OpenGL.Vertex3us,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3us"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Multiply(OpenGL.Vertex3us,OpenGL.Vertex3us)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3us"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3us"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3us"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_ExclusiveOr(OpenGL.Vertex3us,OpenGL.Vertex3us)">
            <summary>
            Cross product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3us"/> representing the left cross product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3us"/> representing the right cross product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3us"/> representing the cross product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Multiply(OpenGL.Vertex3us,System.UInt16)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3us"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Division(OpenGL.Vertex3us,System.UInt16)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3us"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Equality(OpenGL.Vertex3us,OpenGL.Vertex3us)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Inequality(OpenGL.Vertex3us,OpenGL.Vertex3us)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Implicit(OpenGL.Vertex3us)~System.UInt16[]">
            <summary>
            Cast to ushort[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ushort[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Implicit(OpenGL.Vertex3us)~OpenGL.Vertex4us">
            <summary>
            Cast to Vertex4us operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3us"/> to be casted.
            </param>
            <returns>
            A normalized <see cref="T:OpenGL.Vertex4us"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Explicit(OpenGL.Vertex3us)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.op_Explicit(OpenGL.Vertex3us)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex3us.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3us.Min(OpenGL.Vertex3us[])">
            <summary>
            Get the minimum of an array of Vertex3us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3us[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3us holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.Min(OpenGL.Vertex3us*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex3us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3us*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3us holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.Max(OpenGL.Vertex3us[])">
            <summary>
            Get the maximum of an array of Vertex3us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3us[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3us holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.Max(OpenGL.Vertex3us*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex3us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3us*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3us holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.MinMax(OpenGL.Vertex3us[],OpenGL.Vertex3us@,OpenGL.Vertex3us@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3us[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3us"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3us"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3us.MinMax(OpenGL.Vertex3us*,System.UInt32,OpenGL.Vertex3us@,OpenGL.Vertex3us@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3us*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3us"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3us"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3us.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3us.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3us.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3us.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3us.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3us.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3us.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3us.Equals(OpenGL.Vertex3us,System.UInt16)">
            <summary>
            Indicates whether the this Vertex3us is equal to another Vertex3us, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3us"/> to compare with this Vertex3us.
            </param>
            <param name="precision">
            The <see cref="T:System.UInt16"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex3us is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.Equals(OpenGL.Vertex3us)">
            <summary>
            Indicates whether the this Vertex3us is equal to another Vertex3us.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3us"/> to compare with this Vertex3us.
            </param>
            <returns>
            It returns true if the this Vertex3us is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3us.ToString">
            <summary>
            Stringify this Vertex3us.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex3us.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex3s">
            <summary>
            Vertex value type (short coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3s.#ctor(System.Int16)">
            <summary>
            Vertex3s constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.Int16"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3s.#ctor(System.Int16[])">
            <summary>
            Vertex3s constructor.
            </summary>
            <param name="v">
            A <see cref="T:short[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3s.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Vertex3s constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Int16"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Int16"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Int16"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3s.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3s.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3s.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3s.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3s.op_UnaryNegation(OpenGL.Vertex3s)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex3s to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Addition(OpenGL.Vertex3s,OpenGL.Vertex3s)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3s"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3s"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3s"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Subtraction(OpenGL.Vertex3s,OpenGL.Vertex3s)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3s"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3s"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3s"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Multiply(OpenGL.Vertex3s,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3s"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Multiply(OpenGL.Vertex3s,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3s"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Division(OpenGL.Vertex3s,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3s"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Division(OpenGL.Vertex3s,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3s"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Multiply(OpenGL.Vertex3s,OpenGL.Vertex3s)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3s"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3s"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3s"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_ExclusiveOr(OpenGL.Vertex3s,OpenGL.Vertex3s)">
            <summary>
            Cross product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3s"/> representing the left cross product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3s"/> representing the right cross product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3s"/> representing the cross product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Multiply(OpenGL.Vertex3s,System.Int16)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3s"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Division(OpenGL.Vertex3s,System.Int16)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3s"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Equality(OpenGL.Vertex3s,OpenGL.Vertex3s)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Inequality(OpenGL.Vertex3s,OpenGL.Vertex3s)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Implicit(OpenGL.Vertex3s)~System.Int16[]">
            <summary>
            Cast to short[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:short[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Implicit(OpenGL.Vertex3s)~OpenGL.Vertex4s">
            <summary>
            Cast to Vertex4s operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3s"/> to be casted.
            </param>
            <returns>
            A normalized <see cref="T:OpenGL.Vertex4s"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Explicit(OpenGL.Vertex3s)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.op_Explicit(OpenGL.Vertex3s)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex3s.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3s.Min(OpenGL.Vertex3s[])">
            <summary>
            Get the minimum of an array of Vertex3s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3s[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3s holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.Min(OpenGL.Vertex3s*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex3s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3s*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3s holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.Max(OpenGL.Vertex3s[])">
            <summary>
            Get the maximum of an array of Vertex3s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3s[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3s holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.Max(OpenGL.Vertex3s*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex3s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3s*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3s holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.MinMax(OpenGL.Vertex3s[],OpenGL.Vertex3s@,OpenGL.Vertex3s@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3s[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3s"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3s"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3s.MinMax(OpenGL.Vertex3s*,System.UInt32,OpenGL.Vertex3s@,OpenGL.Vertex3s@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3s*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3s"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3s"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3s.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3s.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3s.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3s.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3s.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3s.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3s.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3s.Equals(OpenGL.Vertex3s,System.Int16)">
            <summary>
            Indicates whether the this Vertex3s is equal to another Vertex3s, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3s"/> to compare with this Vertex3s.
            </param>
            <param name="precision">
            The <see cref="T:System.Int16"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex3s is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.Equals(OpenGL.Vertex3s)">
            <summary>
            Indicates whether the this Vertex3s is equal to another Vertex3s.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3s"/> to compare with this Vertex3s.
            </param>
            <returns>
            It returns true if the this Vertex3s is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3s.ToString">
            <summary>
            Stringify this Vertex3s.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex3s.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex3ui">
            <summary>
            Vertex value type (uint coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3ui.#ctor(System.UInt32)">
            <summary>
            Vertex3ui constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.UInt32"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3ui.#ctor(System.UInt32[])">
            <summary>
            Vertex3ui constructor.
            </summary>
            <param name="v">
            A <see cref="T:uint[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3ui.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Vertex3ui constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.UInt32"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3ui.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ui.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ui.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ui.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Addition(OpenGL.Vertex3ui,OpenGL.Vertex3ui)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ui"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3ui"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ui"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Subtraction(OpenGL.Vertex3ui,OpenGL.Vertex3ui)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ui"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3ui"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ui"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Multiply(OpenGL.Vertex3ui,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ui"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Multiply(OpenGL.Vertex3ui,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ui"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Division(OpenGL.Vertex3ui,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ui"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Division(OpenGL.Vertex3ui,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ui"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Multiply(OpenGL.Vertex3ui,OpenGL.Vertex3ui)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ui"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3ui"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ui"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_ExclusiveOr(OpenGL.Vertex3ui,OpenGL.Vertex3ui)">
            <summary>
            Cross product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ui"/> representing the left cross product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3ui"/> representing the right cross product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ui"/> representing the cross product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Multiply(OpenGL.Vertex3ui,System.UInt32)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ui"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Division(OpenGL.Vertex3ui,System.UInt32)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ui"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Equality(OpenGL.Vertex3ui,OpenGL.Vertex3ui)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Inequality(OpenGL.Vertex3ui,OpenGL.Vertex3ui)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Implicit(OpenGL.Vertex3ui)~System.UInt32[]">
            <summary>
            Cast to uint[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:uint[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Implicit(OpenGL.Vertex3ui)~OpenGL.Vertex4ui">
            <summary>
            Cast to Vertex4ui operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3ui"/> to be casted.
            </param>
            <returns>
            A normalized <see cref="T:OpenGL.Vertex4ui"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Explicit(OpenGL.Vertex3ui)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.op_Explicit(OpenGL.Vertex3ui)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex3ui.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3ui.Min(OpenGL.Vertex3ui[])">
            <summary>
            Get the minimum of an array of Vertex3ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ui[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3ui holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.Min(OpenGL.Vertex3ui*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex3ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ui*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3ui holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.Max(OpenGL.Vertex3ui[])">
            <summary>
            Get the maximum of an array of Vertex3ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ui[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3ui holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.Max(OpenGL.Vertex3ui*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex3ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ui*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3ui holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.MinMax(OpenGL.Vertex3ui[],OpenGL.Vertex3ui@,OpenGL.Vertex3ui@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ui[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3ui"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3ui"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3ui.MinMax(OpenGL.Vertex3ui*,System.UInt32,OpenGL.Vertex3ui@,OpenGL.Vertex3ui@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3ui*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3ui"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3ui"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3ui.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ui.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ui.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ui.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ui.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ui.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3ui.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3ui.Equals(OpenGL.Vertex3ui,System.UInt32)">
            <summary>
            Indicates whether the this Vertex3ui is equal to another Vertex3ui, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3ui"/> to compare with this Vertex3ui.
            </param>
            <param name="precision">
            The <see cref="T:System.UInt32"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex3ui is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.Equals(OpenGL.Vertex3ui)">
            <summary>
            Indicates whether the this Vertex3ui is equal to another Vertex3ui.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3ui"/> to compare with this Vertex3ui.
            </param>
            <returns>
            It returns true if the this Vertex3ui is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3ui.ToString">
            <summary>
            Stringify this Vertex3ui.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex3ui.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex3i">
            <summary>
            Vertex value type (int coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3i.#ctor(System.Int32)">
            <summary>
            Vertex3i constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.Int32"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3i.#ctor(System.Int32[])">
            <summary>
            Vertex3i constructor.
            </summary>
            <param name="v">
            A <see cref="T:int[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Vertex3i constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Int32"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Int32"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3i.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3i.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3i.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3i.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3i.op_UnaryNegation(OpenGL.Vertex3i)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex3i to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Addition(OpenGL.Vertex3i,OpenGL.Vertex3i)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3i"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3i"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3i"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Subtraction(OpenGL.Vertex3i,OpenGL.Vertex3i)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3i"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3i"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3i"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Multiply(OpenGL.Vertex3i,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3i"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Multiply(OpenGL.Vertex3i,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3i"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Division(OpenGL.Vertex3i,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3i"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Division(OpenGL.Vertex3i,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3i"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Multiply(OpenGL.Vertex3i,OpenGL.Vertex3i)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3i"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3i"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3i"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_ExclusiveOr(OpenGL.Vertex3i,OpenGL.Vertex3i)">
            <summary>
            Cross product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3i"/> representing the left cross product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3i"/> representing the right cross product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3i"/> representing the cross product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Multiply(OpenGL.Vertex3i,System.Int32)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3i"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Division(OpenGL.Vertex3i,System.Int32)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3i"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Equality(OpenGL.Vertex3i,OpenGL.Vertex3i)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Inequality(OpenGL.Vertex3i,OpenGL.Vertex3i)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Implicit(OpenGL.Vertex3i)~System.Int32[]">
            <summary>
            Cast to int[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:int[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Implicit(OpenGL.Vertex3i)~OpenGL.Vertex4i">
            <summary>
            Cast to Vertex4i operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3i"/> to be casted.
            </param>
            <returns>
            A normalized <see cref="T:OpenGL.Vertex4i"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Explicit(OpenGL.Vertex3i)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.op_Explicit(OpenGL.Vertex3i)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex3i.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3i.Min(OpenGL.Vertex3i[])">
            <summary>
            Get the minimum of an array of Vertex3i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3i[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3i holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.Min(OpenGL.Vertex3i*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex3i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3i*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3i holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.Max(OpenGL.Vertex3i[])">
            <summary>
            Get the maximum of an array of Vertex3i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3i[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3i holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.Max(OpenGL.Vertex3i*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex3i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3i*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3i holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.MinMax(OpenGL.Vertex3i[],OpenGL.Vertex3i@,OpenGL.Vertex3i@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3i[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3i"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3i"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3i.MinMax(OpenGL.Vertex3i*,System.UInt32,OpenGL.Vertex3i@,OpenGL.Vertex3i@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3i*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3i"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3i"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3i.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3i.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3i.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3i.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3i.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3i.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3i.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3i.Equals(OpenGL.Vertex3i,System.Int32)">
            <summary>
            Indicates whether the this Vertex3i is equal to another Vertex3i, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3i"/> to compare with this Vertex3i.
            </param>
            <param name="precision">
            The <see cref="T:System.Int32"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex3i is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.Equals(OpenGL.Vertex3i)">
            <summary>
            Indicates whether the this Vertex3i is equal to another Vertex3i.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3i"/> to compare with this Vertex3i.
            </param>
            <returns>
            It returns true if the this Vertex3i is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3i.ToString">
            <summary>
            Stringify this Vertex3i.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex3i.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex3f">
            <summary>
            Vertex value type (float coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3f.#ctor(System.Single)">
            <summary>
            Vertex3f constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.Single"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3f.#ctor(System.Single[])">
            <summary>
            Vertex3f constructor.
            </summary>
            <param name="v">
            A <see cref="T:float[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Vertex3f constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Single"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3f.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3f.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3f.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3f.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3f.op_UnaryNegation(OpenGL.Vertex3f)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex3f to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Addition(OpenGL.Vertex3f,OpenGL.Vertex3f)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Subtraction(OpenGL.Vertex3f,OpenGL.Vertex3f)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Multiply(OpenGL.Vertex3f,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Multiply(OpenGL.Vertex3f,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Division(OpenGL.Vertex3f,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Division(OpenGL.Vertex3f,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3f"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Multiply(OpenGL.Vertex3f,OpenGL.Vertex3f)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3f"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3f"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_ExclusiveOr(OpenGL.Vertex3f,OpenGL.Vertex3f)">
            <summary>
            Cross product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3f"/> representing the left cross product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3f"/> representing the right cross product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> representing the cross product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Equality(OpenGL.Vertex3f,OpenGL.Vertex3f)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Inequality(OpenGL.Vertex3f,OpenGL.Vertex3f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Implicit(OpenGL.Vertex3f)~System.Single[]">
            <summary>
            Cast to float[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Implicit(OpenGL.Vertex3f)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3f"/> to be casted.
            </param>
            <returns>
            A normalized <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Implicit(OpenGL.Vertex3f)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.op_Implicit(OpenGL.Vertex3f)~OpenGL.Vertex4d">
            <summary>
            Cast to Vertex4d operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex3f.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3f.Min(OpenGL.Vertex3f[])">
            <summary>
            Get the minimum of an array of Vertex3f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3f[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3f holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.Min(OpenGL.Vertex3f*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex3f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3f*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3f holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.Max(OpenGL.Vertex3f[])">
            <summary>
            Get the maximum of an array of Vertex3f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3f[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3f holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.Max(OpenGL.Vertex3f*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex3f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3f*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3f holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.MinMax(OpenGL.Vertex3f[],OpenGL.Vertex3f@,OpenGL.Vertex3f@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3f[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3f"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3f"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3f.MinMax(OpenGL.Vertex3f*,System.UInt32,OpenGL.Vertex3f@,OpenGL.Vertex3f@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3f*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3f"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3f"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3f.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3f.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3f.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3f.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3f.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3f.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3f.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3f.Equals(OpenGL.Vertex3f,System.Single)">
            <summary>
            Indicates whether the this Vertex3f is equal to another Vertex3f, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3f"/> to compare with this Vertex3f.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex3f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.Equals(OpenGL.Vertex3f)">
            <summary>
            Indicates whether the this Vertex3f is equal to another Vertex3f.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3f"/> to compare with this Vertex3f.
            </param>
            <returns>
            It returns true if the this Vertex3f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3f.ToString">
            <summary>
            Stringify this Vertex3f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex3f.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex3d">
            <summary>
            Vertex value type (double coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3d.#ctor(System.Double)">
            <summary>
            Vertex3d constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.Double"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3d.#ctor(System.Double[])">
            <summary>
            Vertex3d constructor.
            </summary>
            <param name="v">
            A <see cref="T:double[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Vertex3d constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Double"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3d.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3d.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3d.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3d.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3d.op_UnaryNegation(OpenGL.Vertex3d)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex3d to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Addition(OpenGL.Vertex3d,OpenGL.Vertex3d)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Subtraction(OpenGL.Vertex3d,OpenGL.Vertex3d)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Multiply(OpenGL.Vertex3d,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Multiply(OpenGL.Vertex3d,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Division(OpenGL.Vertex3d,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Division(OpenGL.Vertex3d,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Multiply(OpenGL.Vertex3d,OpenGL.Vertex3d)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3d"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3d"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_ExclusiveOr(OpenGL.Vertex3d,OpenGL.Vertex3d)">
            <summary>
            Cross product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3d"/> representing the left cross product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3d"/> representing the right cross product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> representing the cross product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Equality(OpenGL.Vertex3d,OpenGL.Vertex3d)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Inequality(OpenGL.Vertex3d,OpenGL.Vertex3d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Implicit(OpenGL.Vertex3d)~System.Double[]">
            <summary>
            Cast to double[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Implicit(OpenGL.Vertex3d)~OpenGL.Vertex4d">
            <summary>
            Cast to Vertex4d operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3d"/> to be casted.
            </param>
            <returns>
            A normalized <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Explicit(OpenGL.Vertex3d)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.op_Explicit(OpenGL.Vertex3d)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex3d.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3d.Min(OpenGL.Vertex3d[])">
            <summary>
            Get the minimum of an array of Vertex3d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3d[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3d holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.Min(OpenGL.Vertex3d*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex3d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3d*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3d holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.Max(OpenGL.Vertex3d[])">
            <summary>
            Get the maximum of an array of Vertex3d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3d[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3d holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.Max(OpenGL.Vertex3d*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex3d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3d*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3d holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.MinMax(OpenGL.Vertex3d[],OpenGL.Vertex3d@,OpenGL.Vertex3d@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3d[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3d"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3d"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3d.MinMax(OpenGL.Vertex3d*,System.UInt32,OpenGL.Vertex3d@,OpenGL.Vertex3d@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3d*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3d"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3d"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3d.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3d.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3d.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3d.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3d.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3d.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3d.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3d.Equals(OpenGL.Vertex3d,System.Double)">
            <summary>
            Indicates whether the this Vertex3d is equal to another Vertex3d, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3d"/> to compare with this Vertex3d.
            </param>
            <param name="precision">
            The <see cref="T:System.Double"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex3d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.Equals(OpenGL.Vertex3d)">
            <summary>
            Indicates whether the this Vertex3d is equal to another Vertex3d.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3d"/> to compare with this Vertex3d.
            </param>
            <returns>
            It returns true if the this Vertex3d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3d.ToString">
            <summary>
            Stringify this Vertex3d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex3d.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex3hf">
            <summary>
            Vertex value type (HalfFloat coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3hf.#ctor(OpenGL.HalfFloat)">
            <summary>
            Vertex3hf constructor.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3hf.#ctor(OpenGL.HalfFloat[])">
            <summary>
            Vertex3hf constructor.
            </summary>
            <param name="v">
            A <see cref="T:HalfFloat[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3hf.#ctor(OpenGL.HalfFloat,OpenGL.HalfFloat,OpenGL.HalfFloat)">
            <summary>
            Vertex3hf constructor.
            </summary>
            <param name="x">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3hf.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3hf.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3hf.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3hf.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_UnaryNegation(OpenGL.Vertex3hf)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex3hf to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Addition(OpenGL.Vertex3hf,OpenGL.Vertex3hf)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3hf"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3hf"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3hf"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Subtraction(OpenGL.Vertex3hf,OpenGL.Vertex3hf)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3hf"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3hf"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3hf"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Multiply(OpenGL.Vertex3hf,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3hf"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Multiply(OpenGL.Vertex3hf,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3hf"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Division(OpenGL.Vertex3hf,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3hf"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Division(OpenGL.Vertex3hf,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3hf"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Multiply(OpenGL.Vertex3hf,OpenGL.Vertex3hf)">
            <summary>
            Dot product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3hf"/> representing the left dot product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3hf"/> representing the right dot product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3hf"/> representing the dot product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_ExclusiveOr(OpenGL.Vertex3hf,OpenGL.Vertex3hf)">
            <summary>
            Cross product operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex3hf"/> representing the left cross product operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex3hf"/> representing the right cross product operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3hf"/> representing the cross product between <paramref name="v1"/> and
            <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Equality(OpenGL.Vertex3hf,OpenGL.Vertex3hf)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Inequality(OpenGL.Vertex3hf,OpenGL.Vertex3hf)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Implicit(OpenGL.Vertex3hf)~OpenGL.HalfFloat[]">
            <summary>
            Cast to HalfFloat[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:HalfFloat[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Implicit(OpenGL.Vertex3hf)~OpenGL.Vertex4hf">
            <summary>
            Cast to Vertex4hf operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3hf"/> to be casted.
            </param>
            <returns>
            A normalized <see cref="T:OpenGL.Vertex4hf"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Explicit(OpenGL.Vertex3hf)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.op_Explicit(OpenGL.Vertex3hf)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex3hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex3hf.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3hf.Min(OpenGL.Vertex3hf[])">
            <summary>
            Get the minimum of an array of Vertex3hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3hf[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3hf holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.Min(OpenGL.Vertex3hf*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex3hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3hf*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3hf holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.Max(OpenGL.Vertex3hf[])">
            <summary>
            Get the maximum of an array of Vertex3hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3hf[]"/> that specifies the values to be processed.
            </param>
            <returns>
            It returns the Vertex3hf holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.Max(OpenGL.Vertex3hf*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex3hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3hf*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex3hf holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.MinMax(OpenGL.Vertex3hf[],OpenGL.Vertex3hf@,OpenGL.Vertex3hf@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3hf[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3hf"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3hf"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex3hf.MinMax(OpenGL.Vertex3hf*,System.UInt32,OpenGL.Vertex3hf@,OpenGL.Vertex3hf@)">
            <summary>
            Get the minimum and maximum of an array of Vertex3hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex3hf*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex3hf"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex3hf"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex3hf.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3hf.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3hf.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3hf.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3hf.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3hf.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex3hf.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex3hf.Equals(OpenGL.Vertex3hf,OpenGL.HalfFloat)">
            <summary>
            Indicates whether the this Vertex3hf is equal to another Vertex3hf, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3hf"/> to compare with this Vertex3hf.
            </param>
            <param name="precision">
            The <see cref="T:OpenGL.HalfFloat"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex3hf is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.Equals(OpenGL.Vertex3hf)">
            <summary>
            Indicates whether the this Vertex3hf is equal to another Vertex3hf.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex3hf"/> to compare with this Vertex3hf.
            </param>
            <returns>
            It returns true if the this Vertex3hf is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex3hf.ToString">
            <summary>
            Stringify this Vertex3hf.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex3hf.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex4ub">
            <summary>
            Vertex value type (byte coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4ub.#ctor(System.Byte)">
            <summary>
            Vertex4ub constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.Byte"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4ub.#ctor(System.Byte[])">
            <summary>
            Vertex4ub constructor.
            </summary>
            <param name="v">
            A <see cref="T:byte[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4ub.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Vertex4ub constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Byte"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Byte"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Byte"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4ub.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Vertex4ub constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Byte"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Byte"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Byte"/> that specify the Z coordinate.
            </param>
            <param name="w">
            A <see cref="T:System.Byte"/> that specify the W coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4ub.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ub.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ub.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ub.w">
            <summary>
            W coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ub.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Addition(OpenGL.Vertex4ub,OpenGL.Vertex4ub)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ub"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4ub"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ub"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Subtraction(OpenGL.Vertex4ub,OpenGL.Vertex4ub)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ub"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4ub"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ub"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Multiply(OpenGL.Vertex4ub,System.Byte)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Byte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ub"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Multiply(OpenGL.Vertex4ub,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ub"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Division(OpenGL.Vertex4ub,System.Byte)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Byte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ub"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Division(OpenGL.Vertex4ub,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ub"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ub"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Equality(OpenGL.Vertex4ub,OpenGL.Vertex4ub)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Inequality(OpenGL.Vertex4ub,OpenGL.Vertex4ub)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Explicit(OpenGL.Vertex4ub)~System.Byte[]">
            <summary>
            Cast to byte[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex4ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:byte[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Explicit(OpenGL.Vertex4ub)~OpenGL.Vertex3ub">
            <summary>
            Cast to Vertex3ub operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ub"/> initialized with the vector components, after normalizing homogeneous coordinate.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Explicit(OpenGL.Vertex4ub)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Explicit(OpenGL.Vertex4ub)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Implicit(OpenGL.Vertex4ub)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Explicit(OpenGL.Vertex4ub)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.op_Implicit(OpenGL.Vertex4ub)~OpenGL.Vertex4d">
            <summary>
            Cast to Vertex4d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ub"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex4ub.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4ub.Min(OpenGL.Vertex4ub[])">
            <summary>
            Get the minimum of an array of Vertex4ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ub[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4ub holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.Min(OpenGL.Vertex4ub*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex4ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ub*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4ub holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.Max(OpenGL.Vertex4ub[])">
            <summary>
            Get the maximum of an array of Vertex4ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ub[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4ub holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.Max(OpenGL.Vertex4ub*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex4ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ub*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4ub holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.MinMax(OpenGL.Vertex4ub[],OpenGL.Vertex4ub@,OpenGL.Vertex4ub@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ub[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4ub"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4ub"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4ub.MinMax(OpenGL.Vertex4ub*,System.UInt32,OpenGL.Vertex4ub@,OpenGL.Vertex4ub@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4ub, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ub*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4ub"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4ub"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4ub.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ub.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ub.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ub.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ub.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ub.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ub.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4ub.Equals(OpenGL.Vertex4ub,System.Byte)">
            <summary>
            Indicates whether the this Vertex4ub is equal to another Vertex4ub, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex4ub"/> to compare with this Vertex4ub.
            </param>
            <param name="precision">
            The <see cref="T:System.Byte"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex4ub is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.Equals(OpenGL.Vertex4ub)">
            <summary>
            Indicates whether the this Vertex4ub is equal to another Vertex4ub.
            </summary>
            <param name="other">
            An <see cref="T:OpenGL.Vertex4ub"/> to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ub.ToString">
            <summary>
            Stringify this Vertex4ub.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex4ub.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex4b">
            <summary>
            Vertex value type (sbyte coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4b.#ctor(System.SByte)">
            <summary>
            Vertex4b constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.SByte"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4b.#ctor(System.SByte[])">
            <summary>
            Vertex4b constructor.
            </summary>
            <param name="v">
            A <see cref="T:sbyte[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4b.#ctor(System.SByte,System.SByte,System.SByte)">
            <summary>
            Vertex4b constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.SByte"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.SByte"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.SByte"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4b.#ctor(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Vertex4b constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.SByte"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.SByte"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.SByte"/> that specify the Z coordinate.
            </param>
            <param name="w">
            A <see cref="T:System.SByte"/> that specify the W coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4b.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4b.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4b.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4b.w">
            <summary>
            W coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4b.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4b.op_UnaryNegation(OpenGL.Vertex4b)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex4b to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Addition(OpenGL.Vertex4b,OpenGL.Vertex4b)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4b"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4b"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4b"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Subtraction(OpenGL.Vertex4b,OpenGL.Vertex4b)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4b"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4b"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4b"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Multiply(OpenGL.Vertex4b,System.SByte)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.SByte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4b"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Multiply(OpenGL.Vertex4b,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4b"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Division(OpenGL.Vertex4b,System.SByte)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.SByte"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4b"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Division(OpenGL.Vertex4b,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4b"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4b"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Equality(OpenGL.Vertex4b,OpenGL.Vertex4b)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Inequality(OpenGL.Vertex4b,OpenGL.Vertex4b)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Explicit(OpenGL.Vertex4b)~System.SByte[]">
            <summary>
            Cast to sbyte[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex4b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:sbyte[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Explicit(OpenGL.Vertex4b)~OpenGL.Vertex3b">
            <summary>
            Cast to Vertex3b operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3b"/> initialized with the vector components, after normalizing homogeneous coordinate.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Explicit(OpenGL.Vertex4b)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Explicit(OpenGL.Vertex4b)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Implicit(OpenGL.Vertex4b)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Explicit(OpenGL.Vertex4b)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.op_Implicit(OpenGL.Vertex4b)~OpenGL.Vertex4d">
            <summary>
            Cast to Vertex4d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4b"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex4b.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4b.Min(OpenGL.Vertex4b[])">
            <summary>
            Get the minimum of an array of Vertex4b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4b[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4b holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.Min(OpenGL.Vertex4b*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex4b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4b*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4b holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.Max(OpenGL.Vertex4b[])">
            <summary>
            Get the maximum of an array of Vertex4b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4b[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4b holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.Max(OpenGL.Vertex4b*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex4b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4b*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4b holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.MinMax(OpenGL.Vertex4b[],OpenGL.Vertex4b@,OpenGL.Vertex4b@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4b[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4b"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4b"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4b.MinMax(OpenGL.Vertex4b*,System.UInt32,OpenGL.Vertex4b@,OpenGL.Vertex4b@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4b, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4b*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4b"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4b"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4b.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4b.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4b.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4b.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4b.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4b.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4b.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4b.Equals(OpenGL.Vertex4b,System.SByte)">
            <summary>
            Indicates whether the this Vertex4b is equal to another Vertex4b, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex4b"/> to compare with this Vertex4b.
            </param>
            <param name="precision">
            The <see cref="T:System.SByte"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex4b is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.Equals(OpenGL.Vertex4b)">
            <summary>
            Indicates whether the this Vertex4b is equal to another Vertex4b.
            </summary>
            <param name="other">
            An <see cref="T:OpenGL.Vertex4b"/> to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4b.ToString">
            <summary>
            Stringify this Vertex4b.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex4b.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex4us">
            <summary>
            Vertex value type (ushort coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4us.#ctor(System.UInt16)">
            <summary>
            Vertex4us constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.UInt16"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4us.#ctor(System.UInt16[])">
            <summary>
            Vertex4us constructor.
            </summary>
            <param name="v">
            A <see cref="T:ushort[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4us.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Vertex4us constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.UInt16"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.UInt16"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.UInt16"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4us.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Vertex4us constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.UInt16"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.UInt16"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.UInt16"/> that specify the Z coordinate.
            </param>
            <param name="w">
            A <see cref="T:System.UInt16"/> that specify the W coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4us.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4us.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4us.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4us.w">
            <summary>
            W coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4us.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Addition(OpenGL.Vertex4us,OpenGL.Vertex4us)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4us"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4us"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4us"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Subtraction(OpenGL.Vertex4us,OpenGL.Vertex4us)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4us"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4us"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4us"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Multiply(OpenGL.Vertex4us,System.UInt16)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4us"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Multiply(OpenGL.Vertex4us,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4us"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Division(OpenGL.Vertex4us,System.UInt16)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4us"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Division(OpenGL.Vertex4us,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4us"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4us"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Equality(OpenGL.Vertex4us,OpenGL.Vertex4us)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Inequality(OpenGL.Vertex4us,OpenGL.Vertex4us)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Explicit(OpenGL.Vertex4us)~System.UInt16[]">
            <summary>
            Cast to ushort[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex4us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:ushort[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Explicit(OpenGL.Vertex4us)~OpenGL.Vertex3us">
            <summary>
            Cast to Vertex3us operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3us"/> initialized with the vector components, after normalizing homogeneous coordinate.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Explicit(OpenGL.Vertex4us)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Explicit(OpenGL.Vertex4us)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Implicit(OpenGL.Vertex4us)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Explicit(OpenGL.Vertex4us)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.op_Implicit(OpenGL.Vertex4us)~OpenGL.Vertex4d">
            <summary>
            Cast to Vertex4d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4us"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex4us.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4us.Min(OpenGL.Vertex4us[])">
            <summary>
            Get the minimum of an array of Vertex4us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4us[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4us holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.Min(OpenGL.Vertex4us*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex4us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4us*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4us holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.Max(OpenGL.Vertex4us[])">
            <summary>
            Get the maximum of an array of Vertex4us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4us[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4us holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.Max(OpenGL.Vertex4us*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex4us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4us*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4us holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.MinMax(OpenGL.Vertex4us[],OpenGL.Vertex4us@,OpenGL.Vertex4us@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4us[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4us"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4us"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4us.MinMax(OpenGL.Vertex4us*,System.UInt32,OpenGL.Vertex4us@,OpenGL.Vertex4us@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4us, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4us*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4us"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4us"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4us.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4us.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4us.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4us.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4us.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4us.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4us.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4us.Equals(OpenGL.Vertex4us,System.UInt16)">
            <summary>
            Indicates whether the this Vertex4us is equal to another Vertex4us, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex4us"/> to compare with this Vertex4us.
            </param>
            <param name="precision">
            The <see cref="T:System.UInt16"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex4us is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.Equals(OpenGL.Vertex4us)">
            <summary>
            Indicates whether the this Vertex4us is equal to another Vertex4us.
            </summary>
            <param name="other">
            An <see cref="T:OpenGL.Vertex4us"/> to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4us.ToString">
            <summary>
            Stringify this Vertex4us.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex4us.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex4s">
            <summary>
            Vertex value type (short coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4s.#ctor(System.Int16)">
            <summary>
            Vertex4s constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.Int16"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4s.#ctor(System.Int16[])">
            <summary>
            Vertex4s constructor.
            </summary>
            <param name="v">
            A <see cref="T:short[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4s.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Vertex4s constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Int16"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Int16"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Int16"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4s.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Vertex4s constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Int16"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Int16"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Int16"/> that specify the Z coordinate.
            </param>
            <param name="w">
            A <see cref="T:System.Int16"/> that specify the W coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4s.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4s.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4s.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4s.w">
            <summary>
            W coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4s.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4s.op_UnaryNegation(OpenGL.Vertex4s)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex4s to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Addition(OpenGL.Vertex4s,OpenGL.Vertex4s)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4s"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4s"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4s"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Subtraction(OpenGL.Vertex4s,OpenGL.Vertex4s)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4s"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4s"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4s"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Multiply(OpenGL.Vertex4s,System.Int16)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4s"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Multiply(OpenGL.Vertex4s,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4s"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Division(OpenGL.Vertex4s,System.Int16)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int16"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4s"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Division(OpenGL.Vertex4s,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4s"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4s"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Equality(OpenGL.Vertex4s,OpenGL.Vertex4s)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Inequality(OpenGL.Vertex4s,OpenGL.Vertex4s)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Explicit(OpenGL.Vertex4s)~System.Int16[]">
            <summary>
            Cast to short[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex4s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:short[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Explicit(OpenGL.Vertex4s)~OpenGL.Vertex3s">
            <summary>
            Cast to Vertex3s operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3s"/> initialized with the vector components, after normalizing homogeneous coordinate.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Explicit(OpenGL.Vertex4s)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Explicit(OpenGL.Vertex4s)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Implicit(OpenGL.Vertex4s)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Explicit(OpenGL.Vertex4s)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.op_Implicit(OpenGL.Vertex4s)~OpenGL.Vertex4d">
            <summary>
            Cast to Vertex4d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4s"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex4s.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4s.Min(OpenGL.Vertex4s[])">
            <summary>
            Get the minimum of an array of Vertex4s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4s[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4s holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.Min(OpenGL.Vertex4s*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex4s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4s*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4s holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.Max(OpenGL.Vertex4s[])">
            <summary>
            Get the maximum of an array of Vertex4s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4s[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4s holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.Max(OpenGL.Vertex4s*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex4s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4s*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4s holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.MinMax(OpenGL.Vertex4s[],OpenGL.Vertex4s@,OpenGL.Vertex4s@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4s[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4s"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4s"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4s.MinMax(OpenGL.Vertex4s*,System.UInt32,OpenGL.Vertex4s@,OpenGL.Vertex4s@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4s, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4s*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4s"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4s"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4s.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4s.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4s.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4s.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4s.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4s.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4s.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4s.Equals(OpenGL.Vertex4s,System.Int16)">
            <summary>
            Indicates whether the this Vertex4s is equal to another Vertex4s, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex4s"/> to compare with this Vertex4s.
            </param>
            <param name="precision">
            The <see cref="T:System.Int16"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex4s is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.Equals(OpenGL.Vertex4s)">
            <summary>
            Indicates whether the this Vertex4s is equal to another Vertex4s.
            </summary>
            <param name="other">
            An <see cref="T:OpenGL.Vertex4s"/> to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4s.ToString">
            <summary>
            Stringify this Vertex4s.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex4s.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex4ui">
            <summary>
            Vertex value type (uint coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4ui.#ctor(System.UInt32)">
            <summary>
            Vertex4ui constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.UInt32"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4ui.#ctor(System.UInt32[])">
            <summary>
            Vertex4ui constructor.
            </summary>
            <param name="v">
            A <see cref="T:uint[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4ui.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Vertex4ui constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.UInt32"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4ui.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Vertex4ui constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.UInt32"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.UInt32"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.UInt32"/> that specify the Z coordinate.
            </param>
            <param name="w">
            A <see cref="T:System.UInt32"/> that specify the W coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4ui.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ui.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ui.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ui.w">
            <summary>
            W coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ui.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Addition(OpenGL.Vertex4ui,OpenGL.Vertex4ui)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ui"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4ui"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ui"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Subtraction(OpenGL.Vertex4ui,OpenGL.Vertex4ui)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ui"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4ui"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ui"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Multiply(OpenGL.Vertex4ui,System.UInt32)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ui"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Multiply(OpenGL.Vertex4ui,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ui"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Division(OpenGL.Vertex4ui,System.UInt32)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.UInt32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ui"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Division(OpenGL.Vertex4ui,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4ui"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4ui"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Equality(OpenGL.Vertex4ui,OpenGL.Vertex4ui)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Inequality(OpenGL.Vertex4ui,OpenGL.Vertex4ui)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Explicit(OpenGL.Vertex4ui)~System.UInt32[]">
            <summary>
            Cast to uint[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex4ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:uint[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Explicit(OpenGL.Vertex4ui)~OpenGL.Vertex3ui">
            <summary>
            Cast to Vertex3ui operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3ui"/> initialized with the vector components, after normalizing homogeneous coordinate.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Explicit(OpenGL.Vertex4ui)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Explicit(OpenGL.Vertex4ui)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Explicit(OpenGL.Vertex4ui)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Explicit(OpenGL.Vertex4ui)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.op_Implicit(OpenGL.Vertex4ui)~OpenGL.Vertex4d">
            <summary>
            Cast to Vertex4d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4ui"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex4ui.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4ui.Min(OpenGL.Vertex4ui[])">
            <summary>
            Get the minimum of an array of Vertex4ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ui[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4ui holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.Min(OpenGL.Vertex4ui*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex4ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ui*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4ui holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.Max(OpenGL.Vertex4ui[])">
            <summary>
            Get the maximum of an array of Vertex4ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ui[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4ui holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.Max(OpenGL.Vertex4ui*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex4ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ui*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4ui holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.MinMax(OpenGL.Vertex4ui[],OpenGL.Vertex4ui@,OpenGL.Vertex4ui@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ui[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4ui"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4ui"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4ui.MinMax(OpenGL.Vertex4ui*,System.UInt32,OpenGL.Vertex4ui@,OpenGL.Vertex4ui@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4ui, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4ui*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4ui"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4ui"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4ui.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ui.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ui.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ui.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ui.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ui.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4ui.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4ui.Equals(OpenGL.Vertex4ui,System.UInt32)">
            <summary>
            Indicates whether the this Vertex4ui is equal to another Vertex4ui, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex4ui"/> to compare with this Vertex4ui.
            </param>
            <param name="precision">
            The <see cref="T:System.UInt32"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex4ui is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.Equals(OpenGL.Vertex4ui)">
            <summary>
            Indicates whether the this Vertex4ui is equal to another Vertex4ui.
            </summary>
            <param name="other">
            An <see cref="T:OpenGL.Vertex4ui"/> to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4ui.ToString">
            <summary>
            Stringify this Vertex4ui.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex4ui.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex4i">
            <summary>
            Vertex value type (int coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4i.#ctor(System.Int32)">
            <summary>
            Vertex4i constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.Int32"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4i.#ctor(System.Int32[])">
            <summary>
            Vertex4i constructor.
            </summary>
            <param name="v">
            A <see cref="T:int[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Vertex4i constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Int32"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Int32"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4i.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Vertex4i constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Int32"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Int32"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Int32"/> that specify the Z coordinate.
            </param>
            <param name="w">
            A <see cref="T:System.Int32"/> that specify the W coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4i.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4i.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4i.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4i.w">
            <summary>
            W coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4i.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4i.op_UnaryNegation(OpenGL.Vertex4i)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex4i to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Addition(OpenGL.Vertex4i,OpenGL.Vertex4i)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4i"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4i"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4i"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Subtraction(OpenGL.Vertex4i,OpenGL.Vertex4i)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4i"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4i"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4i"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Multiply(OpenGL.Vertex4i,System.Int32)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4i"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Multiply(OpenGL.Vertex4i,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4i"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Division(OpenGL.Vertex4i,System.Int32)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Int32"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4i"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Division(OpenGL.Vertex4i,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4i"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4i"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Equality(OpenGL.Vertex4i,OpenGL.Vertex4i)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Inequality(OpenGL.Vertex4i,OpenGL.Vertex4i)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Explicit(OpenGL.Vertex4i)~System.Int32[]">
            <summary>
            Cast to int[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex4i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:int[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Explicit(OpenGL.Vertex4i)~OpenGL.Vertex3i">
            <summary>
            Cast to Vertex3i operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3i"/> initialized with the vector components, after normalizing homogeneous coordinate.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Explicit(OpenGL.Vertex4i)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Explicit(OpenGL.Vertex4i)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Explicit(OpenGL.Vertex4i)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Explicit(OpenGL.Vertex4i)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.op_Implicit(OpenGL.Vertex4i)~OpenGL.Vertex4d">
            <summary>
            Cast to Vertex4d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4i"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex4i.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4i.Min(OpenGL.Vertex4i[])">
            <summary>
            Get the minimum of an array of Vertex4i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4i[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4i holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.Min(OpenGL.Vertex4i*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex4i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4i*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4i holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.Max(OpenGL.Vertex4i[])">
            <summary>
            Get the maximum of an array of Vertex4i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4i[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4i holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.Max(OpenGL.Vertex4i*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex4i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4i*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4i holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.MinMax(OpenGL.Vertex4i[],OpenGL.Vertex4i@,OpenGL.Vertex4i@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4i[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4i"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4i"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4i.MinMax(OpenGL.Vertex4i*,System.UInt32,OpenGL.Vertex4i@,OpenGL.Vertex4i@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4i, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4i*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4i"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4i"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4i.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4i.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4i.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4i.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4i.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4i.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4i.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4i.Equals(OpenGL.Vertex4i,System.Int32)">
            <summary>
            Indicates whether the this Vertex4i is equal to another Vertex4i, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex4i"/> to compare with this Vertex4i.
            </param>
            <param name="precision">
            The <see cref="T:System.Int32"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex4i is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.Equals(OpenGL.Vertex4i)">
            <summary>
            Indicates whether the this Vertex4i is equal to another Vertex4i.
            </summary>
            <param name="other">
            An <see cref="T:OpenGL.Vertex4i"/> to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4i.ToString">
            <summary>
            Stringify this Vertex4i.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex4i.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex4f">
            <summary>
            Vertex value type (float coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4f.#ctor(System.Single)">
            <summary>
            Vertex4f constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.Single"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4f.#ctor(System.Single[])">
            <summary>
            Vertex4f constructor.
            </summary>
            <param name="v">
            A <see cref="T:float[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Vertex4f constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Single"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Vertex4f constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Single"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> that specify the Z coordinate.
            </param>
            <param name="w">
            A <see cref="T:System.Single"/> that specify the W coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4f.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4f.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4f.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4f.w">
            <summary>
            W coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4f.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4f.op_UnaryNegation(OpenGL.Vertex4f)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex4f to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.op_Addition(OpenGL.Vertex4f,OpenGL.Vertex4f)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4f"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4f"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.op_Subtraction(OpenGL.Vertex4f,OpenGL.Vertex4f)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4f"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4f"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.op_Multiply(OpenGL.Vertex4f,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4f"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.op_Division(OpenGL.Vertex4f,System.Single)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4f"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.op_Equality(OpenGL.Vertex4f,OpenGL.Vertex4f)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4f.op_Inequality(OpenGL.Vertex4f,OpenGL.Vertex4f)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4f.op_Explicit(OpenGL.Vertex4f)~System.Single[]">
            <summary>
            Cast to float[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex4f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:float[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.op_Explicit(OpenGL.Vertex4f)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components, after normalizing homogeneous coordinate.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.op_Explicit(OpenGL.Vertex4f)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.op_Explicit(OpenGL.Vertex4f)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.op_Implicit(OpenGL.Vertex4f)~OpenGL.Vertex4d">
            <summary>
            Cast to Vertex4d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4f"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex4f.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4f.Min(OpenGL.Vertex4f[])">
            <summary>
            Get the minimum of an array of Vertex4f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4f[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4f holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.Min(OpenGL.Vertex4f*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex4f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4f*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4f holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.Max(OpenGL.Vertex4f[])">
            <summary>
            Get the maximum of an array of Vertex4f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4f[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4f holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.Max(OpenGL.Vertex4f*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex4f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4f*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4f holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.MinMax(OpenGL.Vertex4f[],OpenGL.Vertex4f@,OpenGL.Vertex4f@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4f[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4f"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4f"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4f.MinMax(OpenGL.Vertex4f*,System.UInt32,OpenGL.Vertex4f@,OpenGL.Vertex4f@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4f, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4f*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4f"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4f"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4f.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4f.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4f.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4f.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4f.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4f.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4f.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4f.Equals(OpenGL.Vertex4f,System.Single)">
            <summary>
            Indicates whether the this Vertex4f is equal to another Vertex4f, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex4f"/> to compare with this Vertex4f.
            </param>
            <param name="precision">
            The <see cref="T:System.Single"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex4f is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.Equals(OpenGL.Vertex4f)">
            <summary>
            Indicates whether the this Vertex4f is equal to another Vertex4f.
            </summary>
            <param name="other">
            An <see cref="T:OpenGL.Vertex4f"/> to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4f.ToString">
            <summary>
            Stringify this Vertex4f.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex4f.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex4d">
            <summary>
            Vertex value type (double coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4d.#ctor(System.Double)">
            <summary>
            Vertex4d constructor.
            </summary>
            <param name="v">
            A <see cref="T:System.Double"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4d.#ctor(System.Double[])">
            <summary>
            Vertex4d constructor.
            </summary>
            <param name="v">
            A <see cref="T:double[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Vertex4d constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Double"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Vertex4d constructor.
            </summary>
            <param name="x">
            A <see cref="T:System.Double"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:System.Double"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:System.Double"/> that specify the Z coordinate.
            </param>
            <param name="w">
            A <see cref="T:System.Double"/> that specify the W coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4d.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4d.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4d.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4d.w">
            <summary>
            W coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4d.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4d.op_UnaryNegation(OpenGL.Vertex4d)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex4d to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Addition(OpenGL.Vertex4d,OpenGL.Vertex4d)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Subtraction(OpenGL.Vertex4d,OpenGL.Vertex4d)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Multiply(OpenGL.Vertex4d,System.Double)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Multiply(OpenGL.Vertex4d,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Division(OpenGL.Vertex4d,System.Double)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Double"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Division(OpenGL.Vertex4d,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4d"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Equality(OpenGL.Vertex4d,OpenGL.Vertex4d)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Inequality(OpenGL.Vertex4d,OpenGL.Vertex4d)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Explicit(OpenGL.Vertex4d)~System.Double[]">
            <summary>
            Cast to double[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex4d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:double[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Explicit(OpenGL.Vertex4d)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3d"/> initialized with the vector components, after normalizing homogeneous coordinate.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Explicit(OpenGL.Vertex4d)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Explicit(OpenGL.Vertex4d)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.op_Explicit(OpenGL.Vertex4d)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4d"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex4d.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4d.Min(OpenGL.Vertex4d[])">
            <summary>
            Get the minimum of an array of Vertex4d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4d[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4d holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.Min(OpenGL.Vertex4d*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex4d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4d*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4d holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.Max(OpenGL.Vertex4d[])">
            <summary>
            Get the maximum of an array of Vertex4d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4d[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4d holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.Max(OpenGL.Vertex4d*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex4d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4d*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4d holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.MinMax(OpenGL.Vertex4d[],OpenGL.Vertex4d@,OpenGL.Vertex4d@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4d[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4d"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4d"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4d.MinMax(OpenGL.Vertex4d*,System.UInt32,OpenGL.Vertex4d@,OpenGL.Vertex4d@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4d, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4d*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4d"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4d"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4d.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4d.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4d.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4d.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4d.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4d.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4d.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4d.Equals(OpenGL.Vertex4d,System.Double)">
            <summary>
            Indicates whether the this Vertex4d is equal to another Vertex4d, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex4d"/> to compare with this Vertex4d.
            </param>
            <param name="precision">
            The <see cref="T:System.Double"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex4d is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.Equals(OpenGL.Vertex4d)">
            <summary>
            Indicates whether the this Vertex4d is equal to another Vertex4d.
            </summary>
            <param name="other">
            An <see cref="T:OpenGL.Vertex4d"/> to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4d.ToString">
            <summary>
            Stringify this Vertex4d.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex4d.
            </returns>
        </member>
        <member name="T:OpenGL.Vertex4hf">
            <summary>
            Vertex value type (HalfFloat coordinates).
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4hf.#ctor(OpenGL.HalfFloat)">
            <summary>
            Vertex4hf constructor.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4hf.#ctor(OpenGL.HalfFloat[])">
            <summary>
            Vertex4hf constructor.
            </summary>
            <param name="v">
            A <see cref="T:HalfFloat[]"/> that specify the value of every component.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4hf.#ctor(OpenGL.HalfFloat,OpenGL.HalfFloat,OpenGL.HalfFloat)">
            <summary>
            Vertex4hf constructor.
            </summary>
            <param name="x">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the Z coordinate.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4hf.#ctor(OpenGL.HalfFloat,OpenGL.HalfFloat,OpenGL.HalfFloat,OpenGL.HalfFloat)">
            <summary>
            Vertex4hf constructor.
            </summary>
            <param name="x">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the X coordinate.
            </param>
            <param name="y">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the Y coordinate.
            </param>
            <param name="z">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the Z coordinate.
            </param>
            <param name="w">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the W coordinate.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4hf.x">
            <summary>
            X coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4hf.y">
            <summary>
            Y coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4hf.z">
            <summary>
            Z coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4hf.w">
            <summary>
            W coordinate for tridimensional vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4hf.Size">
            <summary>
            Structure size.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_UnaryNegation(OpenGL.Vertex4hf)">
            <summary>
            Negate operator.
            </summary>
            <param name="v">
            The Vertex4hf to negate.
            </param>
            <returns>
            It returns the negate of <paramref name="v"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Addition(OpenGL.Vertex4hf,OpenGL.Vertex4hf)">
            <summary>
            Add operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4hf"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4hf"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4hf"/> that equals to the addition of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Subtraction(OpenGL.Vertex4hf,OpenGL.Vertex4hf)">
            <summary>
            Subtract operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4hf"/> that specify the left operand.
            </param>
            <param name="v2">
            A <see cref="T:OpenGL.Vertex4hf"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4hf"/> that equals to the subtraction of <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Multiply(OpenGL.Vertex4hf,OpenGL.HalfFloat)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4hf"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Multiply(OpenGL.Vertex4hf,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4hf"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Division(OpenGL.Vertex4hf,OpenGL.HalfFloat)">
            <summary>
            Scalar divide operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:OpenGL.HalfFloat"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4hf"/> that equals to the division of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Division(OpenGL.Vertex4hf,System.Single)">
            <summary>
            Scalar multiply operator.
            </summary>
            <param name="v1">
            A <see cref="T:OpenGL.Vertex4hf"/> that specify the left operand.
            </param>
            <param name="scalar">
            A <see cref="T:System.Single"/> that specify the right operand.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4hf"/> that equals to the multiplication of <paramref name="v1"/> with <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Equality(OpenGL.Vertex4hf,OpenGL.Vertex4hf)">
            <summary>
            Equality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Inequality(OpenGL.Vertex4hf,OpenGL.Vertex4hf)">
            <summary>
            Inequality operator.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Explicit(OpenGL.Vertex4hf)~OpenGL.HalfFloat[]">
            <summary>
            Cast to HalfFloat[] operator.
            </summary>
            <param name="a">
            A <see cref="T:OpenGL.Vertex4hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:HalfFloat[]"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Explicit(OpenGL.Vertex4hf)~OpenGL.Vertex3hf">
            <summary>
            Cast to Vertex3hf operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3hf"/> initialized with the vector components, after normalizing homogeneous coordinate.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Explicit(OpenGL.Vertex4hf)~OpenGL.Vertex2f">
            <summary>
            Cast to Vertex2f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex2f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Explicit(OpenGL.Vertex4hf)~OpenGL.Vertex3f">
            <summary>
            Cast to Vertex3f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex3f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Implicit(OpenGL.Vertex4hf)~OpenGL.Vertex4f">
            <summary>
            Cast to Vertex4f operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4f"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Explicit(OpenGL.Vertex4hf)~OpenGL.Vertex3d">
            <summary>
            Cast to Vertex3d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.op_Implicit(OpenGL.Vertex4hf)~OpenGL.Vertex4d">
            <summary>
            Cast to Vertex4d operator.
            </summary>
            <param name="v">
            A <see cref="T:OpenGL.Vertex4hf"/> to be casted.
            </param>
            <returns>
            A <see cref="T:OpenGL.Vertex4d"/> initialized with the vector components.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.Module">
            <summary>
            Compute tridimensional vertex module.
            </summary>
            <returns>
            It returns the vertex vector module.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.ModuleSquared">
            <summary>
            Compute tridimensional vertex module, squared.
            </summary>
            <returns>
            It returns the vertex vector module, squared.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.Normalize">
            <summary>
            Normalize vertex coordinates.
            </summary>
        </member>
        <member name="P:OpenGL.Vertex4hf.Normalized">
            <summary>
            This vertex, but normalized.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4hf.Min(OpenGL.Vertex4hf[])">
            <summary>
            Get the minimum of an array of Vertex4hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4hf[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4hf holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.Min(OpenGL.Vertex4hf*,System.UInt32)">
            <summary>
            Get the minimum of an array of Vertex4hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4hf*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4hf holding the minumum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.Max(OpenGL.Vertex4hf[])">
            <summary>
            Get the maximum of an array of Vertex4hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4hf[]"/> that specify the values to be processed.
            </param>
            <returns>
            It returns the Vertex4hf holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.Max(OpenGL.Vertex4hf*,System.UInt32)">
            <summary>
            Get the maximum of an array of Vertex4hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4hf*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <returns>
            It returns the Vertex4hf holding the maximum values.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.MinMax(OpenGL.Vertex4hf[],OpenGL.Vertex4hf@,OpenGL.Vertex4hf@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4hf[]"/> that specifies the values to be processed.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4hf"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4hf"/> that returns the maximum value.
            </param>
        </member>
        <member name="M:OpenGL.Vertex4hf.MinMax(OpenGL.Vertex4hf*,System.UInt32,OpenGL.Vertex4hf@,OpenGL.Vertex4hf@)">
            <summary>
            Get the minimum and maximum of an array of Vertex4hf, component-wise.
            </summary>
            <param name="v">
            A <see cref="T:Vertex4hf*"/> that specifies the values to be processed.
            </param>
            <param name="count">
            A <see cref="T:System.UInt32"/> that specifies how many elements to process.
            </param>
            <param name="min">
            A <see cref="T:OpenGL.Vertex4hf"/> that returns the minimum value.
            </param>
            <param name="max">
            A <see cref="T:OpenGL.Vertex4hf"/> that returns the maximum value.
            </param>
        </member>
        <member name="F:OpenGL.Vertex4hf.Zero">
            <summary>
            Origin vertex.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4hf.One">
            <summary>
            Unit vertex along all axes.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4hf.UnitX">
            <summary>
            Unit vertex along X axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4hf.UnitY">
            <summary>
            Unit vertex along Y axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4hf.UnitZ">
            <summary>
            Unit vertex along Z axis.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4hf.Minimum">
            <summary>
            Vertex with lowest values.
            </summary>
        </member>
        <member name="F:OpenGL.Vertex4hf.Maximum">
            <summary>
            Vertex with highest values.
            </summary>
        </member>
        <member name="M:OpenGL.Vertex4hf.Equals(OpenGL.Vertex4hf,OpenGL.HalfFloat)">
            <summary>
            Indicates whether the this Vertex4hf is equal to another Vertex4hf, tolerating an absolute error.
            </summary>
            <param name="other">
            The <see cref="T:OpenGL.Vertex4hf"/> to compare with this Vertex4hf.
            </param>
            <param name="precision">
            The <see cref="T:OpenGL.HalfFloat"/> that specifies the maximum absolute error tollerance.
            </param>
            <returns>
            It returns true if the this Vertex4hf is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.Equals(OpenGL.Vertex4hf)">
            <summary>
            Indicates whether the this Vertex4hf is equal to another Vertex4hf.
            </summary>
            <param name="other">
            An <see cref="T:OpenGL.Vertex4hf"/> to compare with this object.
            </param>
            <returns>
            It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:OpenGL.Vertex4hf.ToString">
            <summary>
            Stringify this Vertex4hf.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> that represents this Vertex4hf.
            </returns>
        </member>
    </members>
</doc>
